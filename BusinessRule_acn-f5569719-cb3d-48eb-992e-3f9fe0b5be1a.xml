<?xml version="1.0" encoding="UTF-8"?>
<STEP-ProductInformation ContextID="Context1" WorkspaceID="Main" UseContextLocale="false">
    <BusinessRules>
        <BusinessRule ID="acn-f5569719-cb3d-48eb-992e-3f9fe0b5be1a" Scope="Global" Type="Action" RunPrivileged="false" Selected="true" Referenced="true"><!-- Definition:
Action #1 (JavaScriptBusinessActionWithBinds):
<config>
  <bindings>
    <binding alias="node" type="Node" contract="CurrentObjectBindContract"/>
    <binding alias="step" type="Manager" contract="ManagerBindContract"/>
    <binding alias="logger" type="Logger" contract="LoggerBindContract"/>
    <binding alias="mailer" type="MailHome" contract="MailHomeBindContract"/>
    <binding alias="workflow" type="Workflow" contract="CurrentWorkflowBindContract"/>
    <binding alias="lookup" type="LookupTableHome" contract="LookupTableHomeBindContract"/>
  </bindings>
  <messages/>
  <javaScript>
//********************** 1 ***************************
/*======MDSIM-3015 Starts======*/
var isInboundItem = node.getValue("InboundFlag").getSimpleValue();
var InitiatorID = node.getValue("InitiatorID").getSimpleValue();
if (isInboundItem != "Yes") {
    marketCategory.createMarketCatFacSuppExt(node, step, logger, mailer, lookup); //PROD ISSUE:INC11508702
}
/*======MDSIM-3015 End======*/
//MDSIM-4666 - start
var errorMSG = approvalLib.productClassificationCheck(node, step);
if (errorMSG != true) {
    throw errorMSG;
}
//MDSIM-4666 - end

//BR executes on Data Team Submission for NewItemOnboarding w/f
var revision_chk = node.getWorkflowInstance(workflow).getSimpleVariable("REV_FLAG");
var delegateAssignee = node.getWorkflowInstance(workflow).getSimpleVariable("DELIGATE_ASSIGNEE"); //0813
var inputUserId = null;
//3948 
inputUserId = deligateUserLib.fetchDeligateUser(node, workflow, step, logger);
if (inputUserId == "Approval_Grid_Users") {
    throw "User cannot Choose Approval Grid Assignee.";
}


if (inputUserId != null) {
    deligateUserLib.ValidateUserBelongsToItemGroups(inputUserId, node, step, workflow);
    node.getValue("AuthorizeforApprovalforAllMarkets").setSimpleValue(inputUserId);
}



var suppStatus = node.getValue("SupplierRevisionRequired").getSimpleValue();

//Coding for US 2196 Started
if (suppStatus != "Yes") {
    validate.validateItem(node, step, logger, lookup);
}
//Coding for US 2196 Ended


var RequestorEmail = node.getValue("DataReviewTeamEmail").getSimpleValue();
var RevisionFlag = node.getValue("RevisionFlag").getSimpleValue();
var temporaryObjectsStatus;
var tempCreation;
var Category_ID = "";
var Category_ID_Code = "";
var gridStatus = "";
var temp = 0;
var Market;
//var IsNewProduct = node.getValue("IsNewProduct").getSimpleValue(); // Commented by Sourav Tamli for MDSIM - 4898
var IsAutoApproved = node.getValue("InboundFlag").getSimpleValue();
var Responsible_Entity = node.getValue("ItemResponsibleEntity").getSimpleValue();
var Managed_By = node.getValue("ItemManagedBy").getSimpleValue();

//MDSIM-5237 - start
var productGroupValue = node.getValue("ProductGroup").getID(); //MDSIM-4666
if (Responsible_Entity == null || productGroupValue == "SER") Responsible_Entity = "";
if (Managed_By == null || productGroupValue == "SER") Managed_By = "";

//MDSIM-5237 - end

//MDSIM-4666 - start
var approvalUser = null;
/*if(inputUserId == null){
	if (((Responsible_Entity.equals("Global")) && (!Managed_By.equals("McDonald's")) && (RevisionFlag != "Yes") && (!Managed_By.equals("USA New Product Group"))) || ((Responsible_Entity.equals("Market")) && (!Managed_By.equals("McDonald's")) && (RevisionFlag != "Yes") && (!Managed_By.equals("USA New Product Group")))) {
		approvalUser = approvalLib.getApproverFromItemHierarchy(node, step, "XCM");
		logger.info("XCM Scenario approvalUser "+approvalUser);
	}else if(Managed_By.equals("USA New Product Group")){
		approvalUser = approvalLib.getApproverFromItemHierarchy(node, step, "NewProductGroup");
		logger.info("NewProductGroup Scenario approvalUser "+approvalUser);
	}else{
		approvalUser = approvalLib.getApproverFromItemHierarchy(node, step, null);
		logger.info("Global/Market Scenario approvalUser "+approvalUser);
	}
	//inputUserId = approvalUser;
}*/
//MDSIM-4666 - end
if (((Responsible_Entity.equals("Global")) && (!Managed_By.equals("McDonald's"))) || ((Responsible_Entity.equals("Market")) && (!Managed_By.equals("McDonald's")))) {
    gridStatus = "External";
} else if ((Responsible_Entity.equals("Global")) && (Managed_By.equals("McDonald's"))) {
    gridStatus = "Global";
} else if (((Responsible_Entity.equals("Market")) && (Managed_By.equals("McDonald's")))) {
    gridStatus = "Market";
} else if ((Managed_By.equals("USA New Product Group"))) { // Added by Sourav Tamli for MDSIM - 4898

    gridStatus = "Market";
}

//MDSIM-7887-start
//marketCategory.updateVendorDirectFlag(node,node,step,logger);
//MDSIM-7887-end
if (suppStatus != "Yes") {

    var note = node.getValue("ItemReviewNote").getSimpleValue();
    if ((note != null && revision_chk == "yes") || (note == null) || (note != null)) {
        var Mc_id = "";
        var user_group = "";
        var region = "";
        var user_flag;
        var Market_ID = "";
        delRejectReference(node);
        //addAI();
        var references = node.getProductReferences().asSet().iterator();

        var Category = node.getValue("ProductCategory").getSimpleValue();
        //Updated GRID_Type from SIM_Facility_Approval_GRID to SIM_ITEM_APPROVAL_GRID by Debajit (Defect MDSIM-1626)
        var GRID_type = "SIM_ITEM_APPROVAL_GRID";
        var child_ent = step.getEntityHome().getEntityByID("SIM_Market_Category_Details").getChildren().toArray();

        var references = node.getReferences().asSet().iterator();
        while (references.hasNext()) {
            var reference = references.next()
            if (reference.getReferenceType() == "ItemToMarketExtension") {
                var targetMarketName = reference.getTarget().getName();
                for (var i = 0; i < child_ent.length; i++) {

                    if (targetMarketName == child_ent[i].getName()) {
                        Market_ID = child_ent[i].getID();
                        var child_cat = step.getEntityHome().getEntityByID(Market_ID).getChildren().toArray();
                        for (var j = 0; j < child_cat.length; j++) {
                            if (Category == child_cat[j].getName()) {
                                CategoryID = child_cat[j].getID();
                                var split = CategoryID.split("_");
                                Category_ID = split[1] + "_" + split[2];
                                var conc = Market_ID + "_" + Category_ID
                                Category_ID_Code = Category_ID;

                            }
                        }
                    }
                }
            }
        }
        if (IsAutoApproved == "Yes") {
            user_group = "sim_DataTeamUser";
            populateValuesForAutoApproval(node);
            logger.info(user_group + "-_-1user_group1-_-_-_-" + counter);
            node.getWorkflowInstance(workflow).setSimpleVariable("ASSIGNEE_QA", user_group);
            logger.info("-_-1user_group2-_-_-_-" + counter);

        } else if (((Responsible_Entity.equals("Global")) && (!Managed_By.equals("McDonald's")) && (RevisionFlag != "Yes") && (!Managed_By.equals("USA New Product Group"))) || ((Responsible_Entity.equals("Market")) && (!Managed_By.equals("McDonald's")) && (RevisionFlag != "Yes") && (!Managed_By.equals("USA New Product Group")))) {
            var Assigned_Group;
            var FlagCheckForXCMRouting = false;
            logger.info("Inside External Grid");
            var ItemManagedBy = node.getValue("ItemManagedBy").getSimpleValue();
            var ItemResponsibleEntity = node.getValue("ItemResponsibleEntity").getSimpleValue();
            var Category = node.getValue("ProductCategory").getSimpleValue();
            var MarketRef = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension")).toArray();

            if (MarketRef.length > 1) {
                var references = node.getReferences().asSet().iterator();
                var counter = 0;
                while (references.hasNext()) {
                    var reference = references.next();
                    if ((reference.getReferenceType() == "ItemToMarketExtension")) {
                        var status = reference.getValue("MarketExtensionStatus").getSimpleValue();
                        if (status == "Approve") {
                            counter++;
                        }
                    }
                    logger.info("-_-Counter-_-_-_-" + counter);
                }

                logger.info("Exiting While");
                if (counter > 1) {
                    node.getValue("MultiMarketFlag").setSimpleValue("Yes");
                    createTempObjforXCM("ItemToMarketExtension");

                }


            } else {

                node.getValue("MultiMarketFlag").setSimpleValue("No");
                var currNode = node.getID();
                GRID_type = "External_Category_Manager";
                var marketExtensionRef = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension");
                var marketExtensionRefObj = node.getReferences(marketExtensionRef);
                var marketName = "";
                for (var i = 0; i < marketExtensionRefObj.size(); i++) {
                    marketName = marketExtensionRefObj.get(i).getTarget().getName();
                    var region = get_region(marketName);
                    var targetMarketID = marketExtensionRefObj.get(i).getTarget().getID();
                    var child_ent = step.getEntityHome().getEntityByID("SIM_Market_Category_Details").getChildren().toArray();
                    if (marketName == child_ent[i].getName()) {
                        Market_ID = child_ent[i].getID();
                        var child_cat = step.getEntityHome().getEntityByID(Market_ID).getChildren().toArray();
                        for (var j = 0; j < child_cat.length; j++) {
                            if (Category == child_cat[j].getName()) {
                                CategoryID = child_cat[j].getID();
                                var split = CategoryID.split("_");
                                Category_ID = split[1] + "_" + split[2];
                                var conc = Market_ID + "_" + Category_ID;

                            }
                        }
                    }
                    // MDSIM - 4666 fix by Sourav Tamli ::  Started //
                    //user_group = checkApprovalGrid.delegateRequestToApprovalGrid(node, step, logger, targetMarketID, marketName, Category_ID, Category, null, "0", null, lookup);

                    var CheckMcClementMarket = step.getListOfValuesHome().getListOfValuesByID("McClementXCMMarkets").getListOfValuesValueByID(targetMarketID);
                    if (CheckMcClementMarket != null && Managed_By == "McClement") {

                        FlagCheckForXCMRouting = true;

                    } else if (Managed_By == "HAVI" || Managed_By == "TMS") {

                        var CheckApprovalGridForHAVI_TMS = checkApprovalGrid.Check_HAVI_TMS_Approval_GRID(node, step, "XCM", marketName, Managed_By, null, "ONBRD/EXTND");
                        //throw "CheckApprovalGridForHAVI_TMS ::"+CheckApprovalGridForHAVI_TMS
                        if (CheckApprovalGridForHAVI_TMS != "DATATEAMUSER" && CheckApprovalGridForHAVI_TMS != "" && CheckApprovalGridForHAVI_TMS != false && CheckApprovalGridForHAVI_TMS != undefined) {

                            FlagCheckForXCMRouting = true;

                        }

                    }

                }

                //throw "FlagCheckForXCMRouting ::"+FlagCheckForXCMRouting
                if (FlagCheckForXCMRouting) {
                    //If user group is related TMS/HAVI/McClement comes here
                    if (inputUserId == null) {
                        Assigned_Group = approvalLib.getApproverFromItemHierarchy(node, step, "XCM", marketName, Managed_By, lookup);
                    }
                } else {
                    if (inputUserId == null) {
                        Assigned_Group = approvalLib.getApproverFromItemHierarchy(node, step, null, marketName, Managed_By, lookup);
                    }
                }


                logger.info(marketName + "-marketName-" + "-user grp-_-_-_-_-" + user_group);
                node.getValue("TradeItemStatus").setSimpleValue("Pending External Approval");
                updatestatus.updateStatusForMarket(node, step, logger, "Pending External Approval");
                gridStatus = "External";
                node.getWorkflowInstance(workflow).setSimpleVariable("ASSIGNEE_QA", Assigned_Group);
				
                populateFacilityValuesForMrktExtension(node);
                populateStatesOnEntryCreatedOn(node, "XCMOnEntryCreatedOn")

                // MDSIM - 5351 ::: Implementation Started by Sourav Tamli //
                var CheckTheInitiatorWithApprover = CheckInitiatorIDWithApprovers(Assigned_Group, InitiatorID, step);
                if (CheckTheInitiatorWithApprover) {

                    node.getValue("ApproverMatch").setSimpleValue("Yes");

                }
                // MDSIM - 5351 ::: Implementation Ended by Sourav Tamli //

            }
            // MDSIM - 4666 fix by Sourav Tamli ::  Ended //


        } else if ((Responsible_Entity.equals("Global")) && (Managed_By.equals("McDonald's")) && (RevisionFlag != "Yes") && (!Managed_By.equals("USA New Product Group"))) {
            var Assigned_Group;
            logger.info("Inside Global Grid");
            node.getValue("TradeItemStatus").setSimpleValue("Pending Global Approval");
            updatestatus.updateStatusForMarket(node, step, logger, "Pending Global Approval");
            gridStatus = "Global";
            var MarketRef = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension")).toArray();
            if (MarketRef.length >= 1) {
                var references = node.getReferences().asSet().iterator();
                var counter = 0;
                while (references.hasNext()) {
                    var reference = references.next();
                    if ((reference.getReferenceType() == "ItemToMarketExtension")) {
                        var status = reference.getValue("MarketExtensionStatus").getSimpleValue();
                        if (status == "Approve") {
                            counter++;
                        }
                    }
                    logger.info("-_-Counter-_-_-_-" + counter);
                }
                logger.info("Exiting While");
                if (counter >= 1) {
                    logger.info("inside Counter before creating temp");
                    createTempObjforGlobal();
                    if (tempCreation == false) {
                        var references = node.getReferences().asSet().iterator();
                        while (references.hasNext()) {
                            var reference = references.next();
                            if (reference.getReferenceType() == "ItemToMarketExtension") {
                                var targetMarketName = reference.getTarget().getName();
                                for (var i = 0; i < child_ent.length; i++) {
                                    if (targetMarketName == child_ent[i].getName()) {
                                        Market = child_ent[i].getName();
                                        logger.info("-_-Market-_-_-_-" + Market);
                                    }
                                }
                            }
                        }
                        //Updated GRID_Type to SIM_ITEM_GLOBAL_APPROVAL_GRID by Debajit (Defect MDSIM-1626)
                        GRID_type = "SIM_ITEM_GLOBAL_APPROVAL_GRID";
                        region = step.getListOfValuesHome().getListOfValuesByID("SIM_Market_Region").getListOfValuesValueByID(Market).getValue();

                        //***US : 3948-> Implementation Started*****//
                        if (inputUserId == null) {
                            user_group = region + "_" + Category_ID + "_Item"
                            //MDSIM-4666 - start
                            var marketsList = new java.util.ArrayList();
                            marketsList.add(Market);
                            Assigned_Group = get_Global_Responsibility_Facility_GRID_users(region, Category, GRID_type, user_group, marketsList, node, step, logger); //MDSIM-4666 : added market list as parameter
                            //MDSIM-4666 - end
                        } else {
                            Assigned_Group = inputUserId;
                        }
                        //***US : 3948-> Implementation Ended*****//

                        node.getWorkflowInstance(workflow).setSimpleVariable("ASSIGNEE_QA", Assigned_Group);
                        populateFacilityValuesForMrktExtension(node);
                        // MDSIM - 5351 ::: Implementation Started by Sourav Tamli //
                        var CheckTheInitiatorWithApprover = CheckInitiatorIDWithApprovers(Assigned_Group, InitiatorID, step);
                        if (CheckTheInitiatorWithApprover) {

                            node.getValue("ApproverMatch").setSimpleValue("Yes");

                        }
                        // MDSIM - 5351 ::: Implementation Ended by Sourav Tamli //

                    }
                } else if ((counter <= 1) && (status == "Reject")) {
                    logger.info("Inside delete reject")
                    populateFacilityValuesForMrktExtension(node);

                }
            } else {
                logger.info("-In Out of IF-");

                //***US : 3948-> Implementation Started*****//
                if (inputUserId == null) {
                    user_group = "Stibo";
                } else {
                    user_group = inputUserId;
                }
                //***US : 3948-> Implementation Ended*****//

                populateFacilityValuesForMrktExtension(node);
                logger.info(user_group + "-_-1user_group1-_-_-_-" + counter);
                node.getWorkflowInstance(workflow).setSimpleVariable("ASSIGNEE_QA", user_group);
                logger.info("-_-1user_group2-_-_-_-" + counter);

                if (node.getWorkflowInstanceByID("NewItemOnboarding") != null) {
                    logger.info("-_-In External Removing the node from W/F.-_-");
                    node.getWorkflowInstanceByID("NewItemOnboarding").delete("Removing Product from Workflow");
                }
            }


            populateStatesOnEntryCreatedOn(node, "GlobalQATempObjOnEntryCreatedOn");

        } else if (((Responsible_Entity.equals("Market")) && (Managed_By.equals("McDonald's")) && (!Managed_By.equals("USA New Product Group"))) || (RevisionFlag == "Yes" && (!Managed_By.equals("USA New Product Group")))) {
            var Assigned_Group;
            logger.info("Inside Market Grid");
            node.getValue("TradeItemStatus").setSimpleValue("Pending Market Approval");
            updatestatus.updateStatusForMarket(node, step, logger, "Pending Market Approval");
            gridStatus = "Market";
            var MarketRef = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension")).toArray();

            if (MarketRef.length > 1) {
                var references = node.getReferences().asSet().iterator();
                var counter = 0;
                while (references.hasNext()) {
                    var reference = references.next();
                    if ((reference.getReferenceType() == "ItemToMarketExtension")) {
                        var status = reference.getValue("MarketExtensionStatus").getSimpleValue();
                        if (status == "Approve") {
                            counter++;
                        }
                    }
                    logger.info("-_-Counter-_-_-_-" + counter);
                }

                logger.info("Exiting While");
                if (counter > 1) {
                    node.getValue("MultiMarketFlag").setSimpleValue("Yes");
                    createTempObjforMarket("ItemToMarketExtension", node, step, logger, lookup); //MDSIM-5383

                }


            } else {
                node.getValue("MultiMarketFlag").setSimpleValue("No");
                var currNode = node.getID();
                var gridselectionstatus = SelectApprovalGrid(node);
                GRID_type = "SIM_ITEM_APPROVAL_GRID";
                var marketExtensionRef = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension");
                var marketExtensionRefObj = node.getReferences(marketExtensionRef);
                var marketName = "";
                for (var i = 0; i < marketExtensionRefObj.size(); i++) {
                    marketName = marketExtensionRefObj.get(i).getTarget().getName();
                }
                /*======MDSIM-5383 Starts======*/
                var marketNameReq = step.getEntityHome().getEntityByID(Market_ID).getName();
                var marketGroup = lookup.getLookupTableValue("SIM_Lookup_Market_To_Grid", marketNameReq);
                var marketGroupID = lookup.getLookupTableValue("SIM_Lookup_Market_To_Country_Code", marketGroup);
                /*======MDSIM-5383 End======*/

                //***US : 3948-> Implementation Started*****//
                if (inputUserId == null) {
                    user_group = marketGroupID + "_" + Category_ID + "_Item"; //MDSIM-5383
                    Assigned_Group = get_SIM_Facility_Approval_GRID_users(marketName, Category, GRID_type, user_group);
                } else {
                    Assigned_Group = inputUserId;
                }
                //***US : 3948-> Implementation Ended*****//				


                logger.info(marketName + "-marketName-" + "-user grp-_-_-_-_-" + user_group);

                node.getWorkflowInstance(workflow).setSimpleVariable("ASSIGNEE_QA", Assigned_Group);
                populateFacilityValuesForMrktExtension(node);
                //Commented by Debajit for bug MDSIM-2521
                /*
                if(node.getWorkflowInstanceByID("NewItemOnboarding") != null)
                {
                	logger.info("-_-In External Removing the node from W/F.-_-");
                	node.getWorkflowInstanceByID("NewItemOnboarding").delete("Removing Product from Workflow");
                }*/
                // MDSIM - 5351 ::: Implementation Started by Sourav Tamli //
                var CheckTheInitiatorWithApprover = CheckInitiatorIDWithApprovers(Assigned_Group, InitiatorID, step);
                if (CheckTheInitiatorWithApprover) {

                    node.getValue("ApproverMatch").setSimpleValue("Yes");

                }
                // MDSIM - 5351 ::: Implementation Ended by Sourav Tamli //

            }

            populateStatesOnEntryCreatedOn(node, "MarketQATempObjOnEntryCreatedOn");


        } else if (Managed_By.equals("USA New Product Group")) {
            var Assigned_Group;
            logger.info("Inside NewProduct Grid");
            node.getValue("TradeItemStatus").setSimpleValue("Pending Market Approval");
            updatestatus.updateStatusForMarket(node, step, logger, "Pending Market Approval");
            gridStatus = "NewProduct";
            var MarketRef = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension")).toArray();
            if (MarketRef.length > 1) {
                var references = node.getReferences().asSet().iterator();
                var counter = 0;
                while (references.hasNext()) {
                    var reference = references.next();
                    if ((reference.getReferenceType() == "ItemToMarketExtension")) {
                        var status = reference.getValue("MarketExtensionStatus").getSimpleValue();
                        if (status == "Approve") {
                            counter++;
                        }
                    }
                    logger.info("-_-Counter-_-_-_-" + counter);
                }
                logger.info("Exiting While");
                if (counter > 1) {
                    node.getValue("MultiMarketFlag").setSimpleValue("Yes");
                    createTempObjforNewProduct("ItemToMarketExtension");
                }
            } else {
                node.getValue("MultiMarketFlag").setSimpleValue("No");
                var currNode = node.getID();
                var gridselectionstatus = SelectApprovalGrid(node);


                GRID_type = "SIM_NEW_PRODUCT_APPROVAL_GRID";
                // user_group = "McD_NewProduct_Approval_Group";
                var marketExtensionRef = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension");
                var marketExtensionRefObj = node.getReferences(marketExtensionRef);
                var marketName = "";
                for (var i = 0; i < marketExtensionRefObj.size(); i++) {
                    marketName = marketExtensionRefObj.get(i).getTarget().getName();
                }

                //***US : 3948-> Implementation Started*****//
                if (inputUserId == null) {
                    user_group = Market_ID + "_" + Category_ID + "_NPRD";
                    Assigned_Group = get_SIM_Facility_Approval_GRID_users(marketName, Category, GRID_type, user_group);
                } else {
                    Assigned_Group = inputUserId;
                }
                //***US : 3948-> Implementation Ended*****//


                logger.info(marketName + "-marketName-" + "-user grp-_-_-_-_-" + user_group);

                node.getWorkflowInstance(workflow).setSimpleVariable("ASSIGNEE_QA", Assigned_Group);
                populateFacilityValuesForMrktExtension(node);

                // MDSIM - 5351 ::: Implementation Started by Sourav Tamli //
                var CheckTheInitiatorWithApprover = CheckInitiatorIDWithApprovers(Assigned_Group, InitiatorID, step);
                if (CheckTheInitiatorWithApprover) {

                    node.getValue("ApproverMatch").setSimpleValue("Yes");

                }
                // MDSIM - 5351 ::: Implementation Ended by Sourav Tamli //

                //Commented by Debajit for bug MDSIM-2521
                /*if(node.getWorkflowInstanceByID("NewItemOnboarding") != null)
                {
                	logger.info("-_-In External Removing the node from W/F.-_-");
                	node.getWorkflowInstanceByID("NewItemOnboarding").delete("Removing Product from Workflow");
                }*/

            }

            populateStatesOnEntryCreatedOn(node, "NewProductTempObjOnEntryCreatedOn");

        }
    }
}

//fetch the SourcingApprovalMkt for the specified Mcdonald Item
function SelectApprovalGrid(tempObj) {

    var SourcingMarket = new java.util.ArrayList();
    var gridselectionstatus = 0;

    var SourcingApprovalMkt = tempObj.getValue("SourcingApprovalMkt").getSimpleValue();

    //Iterate the SourcingApprovalMkt for the available List of markets
    if (null != SourcingApprovalMkt) {
        var SourcingApprovalMktSplit = SourcingApprovalMkt.split(',');
        for (var i = 0; i < SourcingApprovalMktSplit.length; i++) {
            var fetchSourcingApprovalMkt = SourcingApprovalMktSplit[i];
            SourcingMarket.add(fetchSourcingApprovalMkt);
            logger.info("-_-_-SourcingApprovalMkt-_-_-" + fetchSourcingApprovalMkt);
        }
    }

    var marketID;
    var references = tempObj.getReferences().asSet().iterator();
    while (references.hasNext()) {
        var reference = references.next();
        if (reference.getReferenceType() == "ItemToMarketExtension") {
            marketID = reference.getTarget().getID();
            logger.info("-_-_-marketID-_-_-" + marketID);
            if (SourcingMarket.contains(marketID)) {
                gridselectionstatus = 1;
            }
        }
    }
    logger.info(tempObj.getID() + "-gridselectionstatus-" + gridselectionstatus);
    return gridselectionstatus;
}

//function to fetch user from Market Manager 
function get_SIM_Facility_Approval_GRID_users(targetMarketName, Category, GRID_type, user_group) {
    var count = 0;
    var user_flag = 0;
    var Assigne_ID = "";
    var cat = "SIM_" + Category;
    var Assigned_Group;
    // MDSIM - 4666 fix by Sourav Tamli ::  Started //
    if (inputUserId == null) {
        if (Managed_By.equals("USA New Product Group")) {
            Assigned_Group = approvalLib.getApproverFromItemHierarchy(node, step, "NewProductGroup", targetMarketName, Managed_By, lookup);
        } else {
            Assigned_Group = approvalLib.getApproverFromItemHierarchy(node, step, null, targetMarketName, Managed_By, lookup);
        }
        return Assigned_Group;
        // MDSIM - 4666 fix by Sourav Tamli ::  Ended //
    }
    /*if(approvalUser != null){
    	/* var Team_Users = step.getGroupHome().getGroupByID("Approval_Grid_Users").getUsers().toArray();
    	
    	for (var index = 0; index < Team_Users.length; index++) {
    		var splits = approvalUser.split(",");
    		for (var i = 0; i < splits.length; i++) {
    			if (Team_Users[index].getID() == splits[i]) {
    				step.getGroupHome().getGroupByID(user_group).addUser(step.getUserHome().getUserById(Team_Users[index].getID()));
    			}
    		}
    	} 
    	
    }else{//MDSIM-4666 - end
    	var child_ent = step.getEntityHome().getEntityByID(GRID_type).getChildren().toArray();
    	for (var i = 0; i < child_ent.length; i++) {
    		if (targetMarketName == child_ent[i].getName()) {
    			var Market_ID = child_ent[i].getID();
    			Assigne_ID = step.getEntityHome().getEntityByID(Market_ID).getValue(cat).getSimpleValue();
    		}
    	}
    	logger.info("-GRID_type-" + GRID_type + "-Assigne_ID-" + Assigne_ID + "-user_group-" + user_group);
    	var Team_Users = step.getGroupHome().getGroupByID("Approval_Grid_Users").getUsers().toArray();

    	if (Assigne_ID != null) {
    		for (var index = 0; index < Team_Users.length; index++) {
    			var splits = Assigne_ID.split(",");
    			for (var i = 0; i < splits.length; i++) {
    				if (Team_Users[index].getID() == splits[i]) {
    					step.getGroupHome().getGroupByID(user_group).addUser(step.getUserHome().getUserById(Team_Users[index].getID()));
    				}
    			}
    		}

    	}
    }*/

}

//function to fetch user from Global Responsibility User  

function get_Global_Responsibility_Facility_GRID_users(region, Category, GRID_type, user_group, listOfMarkets) {
    var count = 0;
    var user_flag = 0;
    var Assigne_ID = "";
    var cat = "SIM_" + Category;

    // MDSIM - 4666 fix by Sourav Tamli ::  Started //

    if (inputUserId == null) {
        var Assigned_Group = "";
        for (var mar = 0; mar < listOfMarkets.size(); mar++) {
            var marName = listOfMarkets.get(mar);
            Assigned_Group = approvalLib.getApproverFromItemHierarchy(node, step, null, marName, Managed_By, lookup);


            /* if(approvalUser != null){
            	var Team_Users = step.getGroupHome().getGroupByID("Approval_Grid_Users").getUsers().toArray();
            	
            	for (var index = 0; index < Team_Users.length; index++) {
            		var splits = approvalUser.split(",");
            		for (var i = 0; i < splits.length; i++) {
            			if (Team_Users[index].getID() == splits[i]) {
            				step.getGroupHome().getGroupByID(user_group).addUser(step.getUserHome().getUserById(Team_Users[index].getID()));
            			}
            		}
            	}
            } */
        }
        return Assigned_Group;

        // MDSIM - 4666 fix by Sourav Tamli ::  Started //

    } else {
        var child_ent = step.getEntityHome().getEntityByID(GRID_type).getChildren().toArray();
        for (var i = 0; i < child_ent.length; i++) {
            if (region == child_ent[i].getName()) {
                var region_ID = child_ent[i].getID();
                Assigne_ID = step.getEntityHome().getEntityByID(region_ID).getValue(cat).getSimpleValue();

            }
        }
        var Team_Users = step.getGroupHome().getGroupByID("Approval_Grid_Users").getUsers().toArray();
        if (Assigne_ID != null) {
            for (var index = 0; index < Team_Users.length; index++) {

                var splits = Assigne_ID.split(",");
                for (var i = 0; i < splits.length; i++) {
                    log.info(splits[i]);
                    if (Team_Users[index].getID() == splits[i]) {
                        step.getGroupHome().getGroupByID(user_group).addUser(step.getUserHome().getUserById(Team_Users[index].getID()));

                    }
                }
            }
        }
    }

}

//fetch user from External_Category_Manager 

function get_User_for_External_category_managed(Managed_By, Category, GRID_type, user_group) {
    var user_flag = 0;
    var Assigne_ID = "";
    var cat = "SIM_" + Category;
    var ECM = Managed_By + " Category Manager";
    log.info("ECM name" + ECM)
    var child_ent = step.getEntityHome().getEntityByID(GRID_type).getChildren().toArray();


    for (var i = 0; i < child_ent.length; i++) {
        if (ECM == child_ent[i].getName()) {
            var ECM_ID = child_ent[i].getID();

            Assigne_ID = step.getEntityHome().getEntityByID(ECM_ID).getValue(cat).getSimpleValue();
            log.info("ECM_ID" + Assigne_ID);
        }

    }
    var Team_Users = step.getGroupHome().getGroupByID("Approval_Grid_Users").getUsers().toArray();
    if (Assigne_ID != null) {
        for (var index = 0; index < Team_Users.length; index++) {

            var splits = Assigne_ID.split(",");
            for (var i = 0; i < splits.length; i++) {
                log.info(splits[i]);
                if (Team_Users[index].getID() == splits[i]) {
                    if (step.getGroupHome().getGroupByID(user_group) != null)
                        step.getGroupHome().getGroupByID(user_group).addUser(step.getUserHome().getUserById(Team_Users[index].getID()));
                }
            }
        }
    }
}



function createSupplierReferenceForTemp(tempObj) {

    var itemToSupplierRefType = tempObj.getValue("REF_ItemToSupplier").getSimpleValue() + ""; //Quality Change
    var supplierRef = step.getReferenceTypeHome().getReferenceTypeByID(itemToSupplierRefType);
    var supplierRefObj = node.getReferences(supplierRef);

    for (var i = 0; i < supplierRefObj.size(); i++) {
        var supplierID = supplierRefObj.get(i).getTarget().getID();
        var supplierName = supplierRefObj.get(i).getTarget().getName();
        var supplier = step.getEntityHome().getEntityByID(supplierID); //Quality Change
        if (supplier != null) {
            try {
                tempObj.createReference(supplier, itemToSupplierRefType);
            } catch (e) {
                logger.info("Exception while adding ItemToSupplier referene." + e);
            }
        }

    }
}


//This function is used to populate facility metadata from Pack/Case to McDitem.
function populateFacilityValues(tempObj) {
    var ItemToFacilityID;
    var ItemToFacilityRefList = new java.util.ArrayList();
    var references = tempObj.getReferences().asSet().iterator(); //Quality Change
    tempObj.getValue("TradeItemStatus").setSimpleValue("Pending Market Approval");
    var itemToFacilityExtRefType = tempObj.getValue("REF_ItemToFacilityExtension").getSimpleValue() + ""; //Quality Change
    while (references.hasNext()) {
        var reference = references.next();
        if (reference.getReferenceType() == itemToFacilityExtRefType) {
            var product_Category = node.getValue("ProductCategory").getSimpleValue();
            var additionalPartyIdentification = node.getValue("AdditionalPartyIdentification").getSimpleValue();
            reference.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending Market Approval");

            if (null != product_Category) {
                reference.getValue("ProductCategory").setSimpleValue(product_Category);
            }
            if (null != additionalPartyIdentification) {
                reference.getValue("AdditionalPartyIdentification").setSimpleValue(additionalPartyIdentification);
            }
        }
    }
}


function createTempObjforMarket(refType, node, step, logger, lookup) { //MDSIM-5383
    var Assigned_Group = "";
    var TriggerLater = false;
    var ReferenceType = step.getReferenceTypeHome().getReferenceTypeByID(refType);
    if (ReferenceType != null) {
        var ReferenceTypes = node.getReferences(ReferenceType);
        if (ReferenceTypes.size() > 0) {
            /*======MDSIM-5383 Starts======*/
            var marketsList = new java.util.HashSet();
            var marketGroupsArray = getCurrentDate.getMarketGroupingsArray(node, step, logger, lookup);
            /*======MDSIM-5383 End======*/
            for (var i = 0; i < ReferenceTypes.size(); i++) {
                var reference1 = ReferenceTypes.get(i);
                var targetMarketID = reference1.getTarget().getID();
                var targetMarketName = reference1.getTarget().getName();
                /*======MDSIM-5383 Starts======*/
                var marketGroup = lookup.getLookupTableValue("SIM_Lookup_Market_To_Grid", targetMarketName);
                var marketGroupID = lookup.getLookupTableValue("SIM_Lookup_Market_To_Country_Code", marketGroup);
                if (!marketsList.contains(targetMarketID)) {
                    var foundFlag = false;
                    var eligibleMarketGroupReq = new Array();
                    for (var mrkt in marketGroupsArray) {
                        var eligibleMarketGroup = marketGroupsArray[mrkt];
                        eligibleMarketGroupReq = marketGroupsArray[mrkt];
                        var addFlag = false;
                        for (var emrkt in eligibleMarketGroup) {
                            var eligibleMarket = eligibleMarketGroup[emrkt];
                            if (eligibleMarket == targetMarketID) {
                                addFlag = true;
                                foundFlag = true;
                                break;
                            }
                        }
                        if (addFlag) {
                            for (var emrkt1 in eligibleMarketGroup) {
                                marketsList.add(eligibleMarketGroup[emrkt1]);
                            }
                            break;
                        }
                    }
                    /*======MDSIM-5383 End======*/
                    var status = reference1.getValue("MarketExtensionStatus").getSimpleValue();

                    if (status == "Approve") {
                        var tempObj = null;
                        temp = 1;
                        /*======MDSIM-5383 Starts======*/
                        var formattedTempObjects = node.getID() + "_" + marketGroupID + "_" + "Task";
                        /*======MDSIM-5383 End======*/

                        var formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);
                        logger.info(status + "formattedTempObjectsRef" + formattedTempObjectsRef);

                        var nodeTrim = node.getID();
                        var idSplit = nodeTrim.split("_");
                        var nodeTrimVal = "";
                        if (idSplit[idSplit.length - 1] != "Task") {
                            if (idSplit.length == 3 || idSplit.length == 2) {
                                nodeTrimVal = nodeTrim;
                            } else if (idSplit.length == 6) {
                                nodeTrimVal = idSplit[0] + "_" + idSplit[1] + "_" + idSplit[2];
                            } else if (idSplit.length == 5) {
                                nodeTrimVal = idSplit[0] + "_" + idSplit[1];
                            }
                        } else if (idSplit[idSplit.length - 1] == "Task") {
                            for (var s = 0; s < idSplit.length - 2; s++) {
                                if (s == idSplit.length - 3) {
                                    nodeTrimVal = nodeTrimVal + idSplit[s];
                                } else {
                                    nodeTrimVal = nodeTrimVal + idSplit[s] + "_";
                                }
                            }
                        }
                        logger.info("-nodeTrim-" + nodeTrimVal);
                        nodeTrim = nodeTrimVal;
                        /*======MDSIM-5383 Starts======*/
                        var formattedTempObjectsVal = nodeTrim + "_" + marketGroupID + "_" + "Task";
                        /*======MDSIM-5383 End======*/
                        var formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);

                        if (formattedTempObjectsRef == null) {
                            /*======MDSIM-5383 Starts======*/
                            if (foundFlag) {
                                formattedTempObjects = node.getID() + "_" + marketGroupID + "_" + "Task";
                            } else {
                                marketsList.add(targetMarketID);
                            }
                            /*======MDSIM-5383 End======*/
                            tempObj = step.getProductHome().getProductByID("McDonaldItemTemporaryObjects").createProduct(formattedTempObjects, "McDTargetMarketTempObject");
                            /*======MDSIM-5270======*/
                            var createdByValue = step.getCurrentUser().getID();
                            tempObj.getValue("CreatedBy").setSimpleValue(createdByValue);
                            /*======MDSIM-5270======*/
                            logger.info("Temp Obj-_-_->" + tempObj);
                        } else {
                            formattedTempObjects = formattedTempObjectsVal + "_" + Math.floor((Math.random() * 10000) + 1);
                            formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);

                            logger.info("before formattedTempObjects-" + formattedTempObjects);
                            while (formattedTempObjectsRef != null) {
                                logger.info("In While1");
                                formattedTempObjects = formattedTempObjectsVal + "_" + Math.floor((Math.random() * 10000) + 1);
                                formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);
                            }
                            logger.info("OutWhile" + formattedTempObjects);
                            if (formattedTempObjectsRef == null && tempObj == null) {
                                /*======MDSIM-5383 Starts======*/
                                if (foundFlag) {
                                    formattedTempObjects = node.getID() + "_" + marketGroupID + "_" + "Task";
                                } else {
                                    marketsList.add(targetMarketID);
                                }
                                /*======MDSIM-5383 End======*/
                                tempObj = step.getProductHome().getProductByID("McDonaldItemTemporaryObjects").createProduct(formattedTempObjects, "McDTargetMarketTempObject");
                                /*======MDSIM-5270======*/
                                var createdByValue = step.getCurrentUser().getID();
                                tempObj.getValue("CreatedBy").setSimpleValue(createdByValue);
                                /*======MDSIM-5270======*/
                            }
                            logger.info("-tempObj-" + tempObj);
                        }

                        copyAttributesLib.copyAttributes(node, formattedTempObjects, step);
                        var itemToFacilityExtRefType = node.getValue("REF_ItemToFacilityExtension").getSimpleValue() + ""; //Quality Change
                        createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, itemToFacilityExtRefType);
                        createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "PackCaseToAI");
                        createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "TempItemToPack");
                        createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "TempObjectToMcD");
                        createSupplierReferenceForTemp(tempObj);
                        /*======MDSIM-5383 Starts======*/
                        if (eligibleMarketGroupReq.length > 0 && foundFlag == true) {
                            for (var m in eligibleMarketGroupReq) {
                                var mrktName = step.getEntityHome().getEntityByID(eligibleMarketGroupReq[m]).getName();
                                createfacilityReferenceLib.createfacilityReferenceformrkt(node, step, logger, tempObj, "ItemToMarketExtension", mrktName);
                                createfacilityReferenceLib.createfacilityReferenceformrkt(node, step, logger, tempObj, "ItemToMarketCategory", mrktName);
                            }
                        } else {
                            createfacilityReferenceLib.createfacilityReferenceformrkt(node, step, logger, tempObj, "ItemToMarketExtension", targetMarketName);
                            createfacilityReferenceLib.createfacilityReferenceformrkt(node, step, logger, tempObj, "ItemToMarketCategory", targetMarketName);
                        }
                        /*======MDSIM-5383 End======*/
                        populateFacilityValuesForMrktExtension(tempObj);

                        //Grid Sourcing or facility Selection.
                        logger.info("-calling SelectApprovalGrid-" + tempObj.getID());
                        var gridselectionstatus = SelectApprovalGrid(tempObj);



                        //***US : 3948-> Implementation Started*****//
                        if (inputUserId == null) {
                            if (eligibleMarketGroupReq.length > 0) {
                                for (var m in eligibleMarketGroupReq) {
                                    var mrktName = step.getEntityHome().getEntityByID(eligibleMarketGroupReq[m]).getName();
                                    Assigned_Group = get_SIM_Facility_Approval_GRID_users(mrktName, Category, GRID_type, user_group);

                                }
                            } else {
                                Assigned_Group = get_SIM_Facility_Approval_GRID_users(targetMarketName, Category, GRID_type, user_group);
                            }
                            /*======MDSIM-5383 End======*/
                        } else {

                            if (Managed_By.equals("USA New Product Group")) {
                                //GRID_type = "SIM_NEW_PRODUCT_APPROVAL_GRID";
                                Assigned_Group = inputUserId;
                            } else {
                                //GRID_type = "SIM_ITEM_APPROVAL_GRID";
                                Assigned_Group = inputUserId;
                            }


                        }
                        //***US : 3948-> Implementation Ended*****//



                        tempObj.getValue("TempGlobalMarket").setSimpleValue("Market");
                        tempObj.getValue("TradeItemStatus").setSimpleValue("Pending Market Approval");
                        tempObj.getValue("ITEMTEMPASSIGNEE").setSimpleValue(Assigned_Group);
                        tempObj.getValue("ITEMTEMPASSIGNEE").setSimpleValue(Assigned_Group);

                        // MDSIM - 5351 ::: Implementation Started by Sourav Tamli //
                        var CheckTheInitiatorWithApprover = CheckInitiatorIDWithApprovers(Assigned_Group, InitiatorID, step);
                        if (CheckTheInitiatorWithApprover) {

                            tempObj.getValue("ApproverMatch").setSimpleValue("Yes");
                            TriggerLater = true;

                        }
                        // MDSIM - 5351 ::: Implementation Ended by Sourav Tamli //

                        if ((!tempObj.isInWorkflow("NewItemOnboarding")) && (TriggerLater == false)) {


                            step.getWorkflowHome().getWorkflowByID("NewItemOnboarding").start(tempObj, "workflow triggered sucessfully");


                        } else if (TriggerLater) {

                            node.getValue("TriggerPending").addValue(tempObj.getID());

                        }
                    } else if (status == "Reject") {
                        logger.info("-_-_-_-_-_-Inside Reject If-_-_-");
                        populateFacilityValuesForMrktExtension(node);
                    }
                }
            }

        }
    }

    logger.info("-_-_-_-_-_-Exit While Loop For createTempObjforMarket Function -_-_-");
}


function createTempObjforNewProduct(refType) {
    var Assigned_Group;
    var TriggerLater = false;
    var ReferenceType = step.getReferenceTypeHome().getReferenceTypeByID(refType);
    if (ReferenceType != null) {
        var ReferenceTypes = node.getReferences(ReferenceType);
        if (ReferenceTypes.size() > 0) {

            for (var i = 0; i < ReferenceTypes.size(); i++) {
                var reference1 = ReferenceTypes.get(i);
                var targetMarketID = reference1.getTarget().getID();
                var targetMarketName = reference1.getTarget().getName();

                var status = reference1.getValue("MarketExtensionStatus").getSimpleValue();

                if (status == "Approve") {
                    var tempObj = null;
                    temp = 1;
                    var formattedTempObjects = node.getID() + "_" + targetMarketID + "_" + "Task";

                    var formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);
                    logger.info(status + "formattedTempObjectsRef" + formattedTempObjectsRef);

                    var nodeTrim = node.getID();
                    var idSplit = nodeTrim.split("_");
                    var nodeTrimVal = "";
                    if (idSplit[idSplit.length - 1] != "Task") {
                        if (idSplit.length == 3 || idSplit.length == 2) {
                            nodeTrimVal = nodeTrim;
                        } else if (idSplit.length == 6) {
                            nodeTrimVal = idSplit[0] + "_" + idSplit[1] + "_" + idSplit[2];
                        } else if (idSplit.length == 5) {
                            nodeTrimVal = idSplit[0] + "_" + idSplit[1];
                        }
                    } else if (idSplit[idSplit.length - 1] == "Task") {
                        for (var s = 0; s < idSplit.length - 2; s++) {
                            if (s == idSplit.length - 3) {
                                nodeTrimVal = nodeTrimVal + idSplit[s];
                            } else {
                                nodeTrimVal = nodeTrimVal + idSplit[s] + "_";
                            }
                        }
                    }
                    logger.info("-nodeTrim-" + nodeTrimVal);
                    nodeTrim = nodeTrimVal;

                    var formattedTempObjectsVal = nodeTrim + "_" + targetMarketID + "_" + "Task";
                    var formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);

                    if (formattedTempObjectsRef == null) {
                        tempObj = step.getProductHome().getProductByID("McDonaldItemTemporaryObjects").createProduct(formattedTempObjects, "McDTargetMarketTempObject");
                        /*======MDSIM-5270======*/
                        var createdByValue = step.getCurrentUser().getID();
                        tempObj.getValue("CreatedBy").setSimpleValue(createdByValue);
                        /*======MDSIM-5270======*/
                        logger.info("Temp Obj-_-_->" + tempObj);
                    } else {
                        formattedTempObjects = formattedTempObjectsVal + "_" + Math.floor((Math.random() * 10000) + 1);
                        formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);

                        logger.info("before formattedTempObjects-" + formattedTempObjects);
                        while (formattedTempObjectsRef != null) {
                            logger.info("In While1");
                            formattedTempObjects = formattedTempObjectsVal + "_" + Math.floor((Math.random() * 10000) + 1);
                            formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);
                        }
                        logger.info("OutWhile" + formattedTempObjects);
                        if (formattedTempObjectsRef == null && tempObj == null) {
                            tempObj = step.getProductHome().getProductByID("McDonaldItemTemporaryObjects").createProduct(formattedTempObjects, "McDTargetMarketTempObject");
                            /*======MDSIM-5270======*/
                            var createdByValue = step.getCurrentUser().getID();
                            tempObj.getValue("CreatedBy").setSimpleValue(createdByValue);
                            /*======MDSIM-5270======*/
                        }
                        logger.info("-tempObj-" + tempObj);
                    }
                    copyAttributesLib.copyAttributes(node, formattedTempObjects, step);
                    var itemToFacilityExtRefType = node.getValue("REF_ItemToFacilityExtension").getSimpleValue() + ""; //Quality Change
                    createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, itemToFacilityExtRefType);
                    createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "PackCaseToAI");
                    createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "TempItemToPack");
                    createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "TempObjectToMcD");
                    createSupplierReferenceForTemp(tempObj);
                    createfacilityReferenceLib.createfacilityReferenceformrkt(node, step, logger, tempObj, "ItemToMarketExtension", targetMarketName);
                    createfacilityReferenceLib.createfacilityReferenceformrkt(node, step, logger, tempObj, "ItemToMarketCategory", targetMarketName);
                    populateFacilityValuesForMrktExtension(tempObj);

                    //Grid Sourcing or facility Selection.
                    logger.info("-calling SelectApprovalGrid-" + tempObj.getID());
                    var gridselectionstatus = SelectApprovalGrid(tempObj);

                    //***US : 3948-> Implementation Started*****//
                    if (inputUserId == null) {
                        if (Managed_By.equals("USA New Product Group")) {
                            GRID_type = "SIM_NEW_PRODUCT_APPROVAL_GRID";
                            user_group = targetMarketID + "_" + Category_ID + "_NPRD";
                        }
                        Assigned_Group = get_SIM_Facility_Approval_GRID_users(targetMarketName, Category, GRID_type, user_group);
                    } else {
                        if (Managed_By.equals("USA New Product Group")) {
                            GRID_type = "SIM_NEW_PRODUCT_APPROVAL_GRID";
                            Assigned_Group = inputUserId;
                        }
                    }
                    //***US : 3948-> Implementation Ended*****//
                    //Commented by Sourav Tamli-_-_-> Same mail triggers from NewProduct onEntry
                    //sendEmailtoSelectiveMarketUsers(targetMarketName, Category, GRID_type, user_group);
                    tempObj.getValue("TempGlobalMarket").setSimpleValue("NewProduct");
                    tempObj.getValue("TradeItemStatus").setSimpleValue("Pending Market Approval");
                    tempObj.getValue("ITEMTEMPASSIGNEE").setSimpleValue(Assigned_Group);
                    // MDSIM - 5351 ::: Implementation Started by Sourav Tamli //
                    var CheckTheInitiatorWithApprover = CheckInitiatorIDWithApprovers(Assigned_Group, InitiatorID, step);
                    if (CheckTheInitiatorWithApprover) {

                        tempObj.getValue("ApproverMatch").setSimpleValue("Yes");
                        TriggerLater = true;

                    }
                    // MDSIM - 5351 ::: Implementation Ended by Sourav Tamli //
                    if ((!tempObj.isInWorkflow("NewItemOnboarding")) && (TriggerLater == false)) {
                        step.getWorkflowHome().getWorkflowByID("NewItemOnboarding").start(tempObj, "workflow triggered sucessfully");

                    } else if (TriggerLater) {

                        node.getValue("TriggerPending").addValue(tempObj.getID());

                    }
                } else if (status == "Reject") {
                    logger.info("-_-_-_-_-_-Inside Reject If-_-_-");
                    populateFacilityValuesForMrktExtension(node);
                }
            }

        }
    }
    logger.info("-_-_-_-_-_-Exit While Loop For createTempObjforNewProduct Function -_-_-");
}



function createTempObjforGlobal() {
    logger.info("createTempObjforGlobal");
    var references = node.getReferences().asSet().iterator();
    var APMEARegionList = new java.util.ArrayList();
    var EuropeRegionList = new java.util.ArrayList();
    var NARegionList = new java.util.ArrayList();
    var SARegionList = new java.util.ArrayList();

    var MultiRegionList = new java.util.ArrayList();

    var APMEARegionTemp;
    var EuropeRegionTemp;
    var NARegionTemp;
    var SARegionTemp;

    var market;
    var regionByMarket;
    var numOfMrkts = 0;

    while (references.hasNext()) {
        var reference = references.next()
        if (reference.getReferenceType() == "ItemToMarketExtension") {
            market = reference.getTarget().getName();
            var status = reference.getValue("MarketExtensionStatus").getSimpleValue();
            if (status == "Approve") {
                regionByMarket = get_region(market);
                if (regionByMarket == "APMEA") {
                    APMEARegionList.add(market);
                } else if (regionByMarket == "Europe") {
                    EuropeRegionList.add(market);
                } else if (regionByMarket == "North America") {
                    NARegionList.add(market);
                } else if (regionByMarket == "South America") {
                    SARegionList.add(market);
                }
                numOfMrkts++;
            }
        }
    }

    if (APMEARegionList.size() > 0) {
        MultiRegionList.add("1");
    }
    if (EuropeRegionList.size() > 0) {
        MultiRegionList.add("2");
    }
    if (NARegionList.size() > 0) {
        MultiRegionList.add("3");
    }
    if (SARegionList.size() > 0) {
        MultiRegionList.add("4");
    }

    if (numOfMrkts > 1) {
        node.getValue("MultiMarketFlag").setSimpleValue("Yes");
    } else {
        node.getValue("MultiMarketFlag").setSimpleValue("No");
    }

    if (MultiRegionList.size() == 1) {
        tempCreation = false;
    } else if (MultiRegionList.size() > 1) {
        if (APMEARegionList.size() > 0) {
            createTempObj("APMEA", Category_ID, APMEARegionList); //MDSIM-4666 : added market list as parameter 
        }
        if (EuropeRegionList.size() > 0) {
            createTempObj("Europe", Category_ID, EuropeRegionList); //MDSIM-4666 : added market list as parameter
        }
        if (NARegionList.size() > 0) {
            createTempObj("North America", Category_ID, NARegionList); //MDSIM-4666 : added market list as parameter
        }
        if (SARegionList.size() > 0) {
            createTempObj("South America", Category_ID, SARegionList); //MDSIM-4666 : added market list as parameter
        }
    }

}


function get_region(market) {
    var region = step.getListOfValuesHome().getListOfValuesByID("SIM_Market_Region").getListOfValuesValueByID(market).getValue();
    return region;
}


function createTempObj(region, Category_ID, listOfMarkets) {
    logger.info("createTempObjforGlobal-_-region and category");
    var TriggerLater = false;
    var tempObj = null;
    var Assigned_Group = "";

    var ReferenceType = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension");
    if (ReferenceType != null) {

        var ReferenceTypes = node.getReferences(ReferenceType);
        if (ReferenceTypes.size() > 0) {

            //for (var i = 0; i < ReferenceTypes.size(); i++)
            //{
            //var reference = ReferenceTypes.get(i);
            //var status = reference.getValue("MarketExtensionStatus").getSimpleValue();
            //if (status == "Approve")
            //{
            var formattedTempObjects = node.getID() + "_" + region + "_" + "Task";
            var formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);
            var nodeTrim = node.getID();
            var idSplit = nodeTrim.split("_");
            var nodeTrimVal = "";
            if (idSplit[idSplit.length - 1] != "Task") {
                if (idSplit.length == 3 || idSplit.length == 2) {
                    nodeTrimVal = nodeTrim;
                } else if (idSplit.length == 6) {
                    nodeTrimVal = idSplit[0] + "_" + idSplit[1] + "_" + idSplit[2];
                } else if (idSplit.length == 5) {
                    nodeTrimVal = idSplit[0] + "_" + idSplit[1];
                }
            } else if (idSplit[idSplit.length - 1] == "Task") {
                for (var s = 0; s < idSplit.length - 2; s++) {
                    if (s == idSplit.length - 3) {
                        nodeTrimVal = nodeTrimVal + idSplit[s];
                    } else {
                        nodeTrimVal = nodeTrimVal + idSplit[s] + "_";
                    }
                }
            }
            logger.info("-nodeTrim-" + nodeTrimVal);
            nodeTrim = nodeTrimVal;

            var formattedTempObjectsVal = nodeTrim + "_" + region + "_" + "Task";
            var formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);

            if (formattedTempObjectsRef == null) {
                tempObj = step.getProductHome().getProductByID("McDonaldItemTemporaryObjects").createProduct(formattedTempObjects, "McDTargetMarketTempObject");
                /*======MDSIM-5270======*/
                var createdByValue = step.getCurrentUser().getID();
                tempObj.getValue("CreatedBy").setSimpleValue(createdByValue);
                /*======MDSIM-5270======*/
            } else {
                formattedTempObjects = formattedTempObjectsVal + "_" + Math.floor((Math.random() * 10000) + 1);
                formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);

                logger.info("before formattedTempObjects-" + formattedTempObjects);
                while (formattedTempObjectsRef != null) {
                    logger.info("In While1");
                    formattedTempObjects = formattedTempObjectsVal + "_" + Math.floor((Math.random() * 10000) + 1);
                    formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);
                }
                logger.info("OutWhile" + formattedTempObjects);
                if (formattedTempObjectsRef == null && tempObj == null) {
                    tempObj = step.getProductHome().getProductByID("McDonaldItemTemporaryObjects").createProduct(formattedTempObjects, "McDTargetMarketTempObject");
                    /*======MDSIM-5270======*/
                    var createdByValue = step.getCurrentUser().getID();
                    tempObj.getValue("CreatedBy").setSimpleValue(createdByValue);
                    /*======MDSIM-5270======*/
                    tempObj.getValue("MultiMarketFlag").setSimpleValue("Yes"); //1013				
                }
                logger.info("-tempObj-" + tempObj);
            }

            copyAttributesLib.copyAttributes(node, formattedTempObjects, step);
            //Quality Change - start
            var itemFacilityExtRefType = node.getValue("REF_ItemToFacilityExtension").getSimpleValue() + "";
            createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, itemFacilityExtRefType);
            //Quality Change - end
            createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "PackCaseToAI");
            createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "TempItemToPack");
            createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "TempObjectToMcD");
            createSupplierReferenceForTemp(tempObj);
            populateFacilityValuesForMrktExtension(tempObj);
            createfacilityReferenceLib.createfacilityReference(node, step, logger, tempObj, "ItemToMarketExtension", region);
            createfacilityReferenceLib.createfacilityReferenceformrkt(node, step, logger, tempObj, "ItemToMarketCategory", region);
            //Updated GRID_Type to SIM_ITEM_GLOBAL_APPROVAL_GRID by Debajit (Defect MDSIM-1626)


            //***US : 3948-> Implementation Started*****//
            if (inputUserId == null) {
                //GRID_type = "SIM_ITEM_GLOBAL_APPROVAL_GRID";
                //user_group = region + "_" + Category_ID + "_Item";
                Assigned_Group = get_Global_Responsibility_Facility_GRID_users(region, Category, GRID_type, user_group, listOfMarkets); //MDSIM-4666 : added market list as parameter
            } else {
                //GRID_type = "SIM_ITEM_GLOBAL_APPROVAL_GRID";
                user_group = Assigned_Group;

            }
            //***US : 3948-> Implementation eNDED*****//

            tempObj.getValue("ITEMTEMPASSIGNEE").setSimpleValue(Assigned_Group);
            tempObj.getValue("TempGlobalMarket").setSimpleValue("Global");
            tempObj.getValue("TradeItemStatus").setSimpleValue("Pending Global Approval");

            // MDSIM - 5351 ::: Implementation Started by Sourav Tamli //
            var CheckTheInitiatorWithApprover = CheckInitiatorIDWithApprovers(Assigned_Group, InitiatorID, step);
            if (CheckTheInitiatorWithApprover) {

                tempObj.getValue("ApproverMatch").setSimpleValue("Yes");
                TriggerLater = true;

            }
            // MDSIM - 5351 ::: Implementation Ended by Sourav Tamli //

            if ((!tempObj.isInWorkflow("NewItemOnboarding")) && (TriggerLater == false)) {
                step.getWorkflowHome().getWorkflowByID("NewItemOnboarding").start(tempObj, "workflow triggered sucessfully");
            } else if (TriggerLater) {

                node.getValue("TriggerPending").addValue(tempObj.getID());

            }
            //}
            //}
        }
    }
}


function populateFacilityValuesForMrktExtension(tempObj) {
	
    var Responsible_Entity_check = node.getValue("ItemResponsibleEntity").getSimpleValue();
    var references1 = node.getReferences().asSet().iterator();
    while (references1.hasNext()) {
        var reference1 = references1.next();
        if ((reference1.getReferenceType() == "ItemToMarketExtension")) {
            var facilityref = reference1.getTarget().getID();
            var facilityrefID = step.getEntityHome().getEntityByID(facilityref);
            var status = reference1.getValue("MarketExtensionStatus").getSimpleValue();
			//MDSIM-7887-start
			
			var vendorDirect = reference1.getValue("IsVendorDirect").getSimpleValue();
			
			//MDSIM-7887-end
            var references = node.getReferences().asSet().iterator();
            var temp = 0;
            while (references.hasNext()) {
                var reference = references.next();
                if (reference.getReferenceType() == "ItemToMarketCategory") {
                    logger.info("facilityref-_->" + facilityref);
					
                    try {
                        var check = reference.getTarget().getID();
                        var checkID = step.getEntityHome().getEntityByID(facilityref);
						
                        if (check != facilityref) {
                            var ItemToMarketCategoryRef = node.createReference(facilityrefID, "ItemToMarketCategory");						
							
							
                            if (status == "Approve") {
                                if (!Managed_By.equals("USA New Product Group")) {
                                    ItemToMarketCategoryRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending " + gridStatus + " Approval");
                                } else {
                                    ItemToMarketCategoryRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending Market Approval");
                                }

                            } else if (status == "Reject") {
                                ItemToMarketCategoryRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Rejected");
                            } else if (status == "Pending Facility Approval") {
                                ItemToMarketCategoryRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending Facility Approval");
                            }
							
							//MDSIM-7887-start
							if(null != vendorDirect){
								ItemToMarketCategoryRef.getValue("IsVendorDirect").setSimpleValue(vendorDirect);
							}
							//MDSIM-7887-end
							
                        } else {
							ItemToMarketCategoryRef = reference;
                            if (status == "Approve") {
                                if (!Managed_By.equals("USA New Product Group")) {
                                    ItemToMarketCategoryRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending " + gridStatus + " Approval");
                                } else {
                                    ItemToMarketCategoryRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending Market Approval");
                                }

                            } else if (status == "Reject") {
                                reference.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Rejected");
                                populatereferencesforItem(node);
                            } else if (status == "Pending Facility Approval") {
                                ItemToMarketCategoryRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending Facility Approval");
                            }
							
							//MDSIM-7887-start
							if(null != vendorDirect){
								reference.getValue("IsVendorDirect").setSimpleValue(vendorDirect);
							}
							//MDSIM-7887-end
                        }
						
						
					
                    } catch (e) {
                        logger.info("ExceptionInMarket is:-_-_-_-_-_->" + e);
						
                    }
					
                }
            }
        }

        //Quality Change - start
        var itemFacilityExtRefType = node.getValue("REF_ItemToFacilityExtension").getSimpleValue() + "";
        if ((reference1.getReferenceType() == itemFacilityExtRefType)) {
            var facilityref = reference1.getTarget().getID();
            var facilityrefID = step.getEntityHome().getEntityByID(facilityref);
            //Quality Change - end
            var Market_Status = reference1.getValue("FacilityApprovedCategory_Market_Status").getSimpleValue();
            var FacilityType = reference1.getValue("FacilityType").getSimpleValue();
            var IsShipPoint = reference1.getValue("IsShipPoint").getSimpleValue();
            var ItemShippedFacility = reference1.getValue("ItemShippedFacility").getSimpleValue();
            var ItemManufacturingPoint = reference1.getValue("ItemManufacturingPoint").getSimpleValue();
            var WSI = reference1.getValue("AdditionalPartyIdentification").getSimpleValue();
            var GLN = reference1.getValue("GLN").getSimpleValue();
            var customFacilityID = reference1.getValue("SIM_Identifier").getSimpleValue(); // fetching custom Facility ID to TempObj (US -> MDSIM-3997)
            var ItemRelevantMarketCategory = reference1.getValue("ItemRelevantMarketCategory").getSimpleValue(); // added by Sourav Tamli for MDSIM - 2618 //
            SupplierID = reference1.getValue("SupplierID").getSimpleValue();
            SupplierName = reference1.getValue("SupplierName").getSimpleValue();

            var references = node.getReferences().asSet().iterator();
            var temp = 0;
            //Quality Change - start
            var itemFacilityRefType = node.getValue("REF_ItemToFacility").getSimpleValue() + "";
            //Quality Change - end
            while (references.hasNext()) {
                var reference = references.next();
                if (reference.getReferenceType() == itemFacilityRefType) {
                    try {
                        var check = reference.getTarget().getID();
                        var checkID = step.getEntityHome().getEntityByID(facilityref);
                        if (check == facilityref) {
                            var ItemTofacilityRef = tempObj.createReference(facilityrefID, itemFacilityRefType);
                            logger.info("-_-inside itemToFacility-_-");
                            ItemTofacilityRef.getValue("SIM_Identifier").setSimpleValue(customFacilityID); // setting custom Facility ID to TempObj (US -> MDSIM-3997)
                            ItemTofacilityRef.getValue("FacilityApprovedCategory_Market_Status").setSimpleValue(Market_Status);
                            ItemTofacilityRef.getValue("FacilityType").setSimpleValue(FacilityType);
                            ItemTofacilityRef.getValue("IsShipPoint").setSimpleValue(IsShipPoint);
                            ItemTofacilityRef.getValue("SupplierID").setSimpleValue(SupplierID);
                            ItemTofacilityRef.getValue("SupplierName").setSimpleValue(SupplierName);
                            ItemTofacilityRef.getValue("ItemManufacturingPoint").setSimpleValue(ItemManufacturingPoint);
                            ItemTofacilityRef.getValue("ItemShippedFacility").setSimpleValue(ItemShippedFacility);
                            ItemTofacilityRef.getValue("ItemRelevantMarketCategory").setSimpleValue(ItemRelevantMarketCategory); // added by Sourav Tamli for MDSIM - 2618 //
                            if (!Managed_By.equals("USA New Product Group")) {
                                ItemTofacilityRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending " + gridStatus + " Approval");
                            } else {
                                ItemTofacilityRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending Market Approval");
                            }
                            ItemTofacilityRef.getValue("AdditionalPartyIdentification").setSimpleValue(WSI);
                            ItemTofacilityRef.getValue("GLN").setSimpleValue(GLN);
                        }
                    } catch (e) {
                        logger.info("Exception is:-_-_-_-_-_->" + e);
                    }
                }
            }
        }
    }

}


function delRejectReference(tempobj) {
    var gridStatus = "";
    var checkMarket = false;
    var checkFlagForHAVI_TMS = false;
    var CheckApprovalGridForHAVI_TMS;
    var status = "";
    var objType = node.getObjectType().getID();
    var currentuser = step.getCurrentUser().getID();
    var currentuserVal = step.getUserHome().getUserById(currentuser);
    var currentuserEmail = currentuser + "(" + currentuserVal.getEMail() + ")";
    var userID = node.getValue("ApprovedByDataTeamUser").setSimpleValue(currentuserEmail);
    /*
		Commented By Jawaid, 2 Semicolons were getting added
		removed the semicolon
		var formattedEmail = node.getValue("ContactEmail").getSimpleValue() + ";"
		*/
    var formattedEmail = node.getValue("ContactEmail").getSimpleValue();
    var ReferenceType = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketCategory");
    var Managed_By = node.getValue("ItemManagedBy").getSimpleValue();
    if (Managed_By == null || productGroupValue == "SER") Managed_By = ""; //MDSIM-5237
    if (ReferenceType != null) {
        var ReferenceTypes = node.getReferences(ReferenceType);
        if (ReferenceTypes.size() > 0) {
            for (var i = 0; i < ReferenceTypes.size(); i++) {
                var reference1 = ReferenceTypes.get(i);
                var facility = reference1.getTarget().getID();
                var references = tempobj.getReferences().asSet().iterator();
                while (references.hasNext()) {
                    var reference = references.next()
                    if ((reference.getReferenceType() == "ItemToMarketExtension")) {
                        var marketid = reference.getTarget().getID();
                        var marketName = reference.getTarget().getName();
                        status = reference.getValue("MarketExtensionStatus").getSimpleValue();
                        if ((status == "Reject" || status == "Pending Facility Approval") && (facility == marketid)) {
                            if (status == "Reject")
                                reference1.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Rejected");
                            else if (status == "Pending Facility Approval")
                                reference1.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending Facility Approval");
                            reference.delete();
                            logger.info(facility + "IF DELETED-_-" + status);
                        } else if ((status == "Approve") && (facility == marketid)) {
                            checkMarket = getMcClementMarkets(marketid, node, step, logger);
                            //checkFlagForHAVI_TMS = validateTMSHVAIProdCtgy(node, step, logger, marketid);

                            if (Managed_By == "McDonald's" || Managed_By == "McClement") {
                                if (((Responsible_Entity.equals("Global")) && (!Managed_By.equals("McDonald's")) && (checkMarket == true)) || ((Responsible_Entity.equals("Market")) && (!Managed_By.equals("McDonald's")) && (checkMarket == true))) {
                                    gridStatus = "External";
                                } else if (((Responsible_Entity.equals("Global")) && (Managed_By.equals("McDonald's"))) || ((Responsible_Entity.equals("Global")) && (!Managed_By.equals("McDonald's")) && (checkMarket == false))) {
                                    gridStatus = "Global";
                                } else if (((Responsible_Entity.equals("Market")) && (Managed_By.equals("McDonald's"))) || ((Responsible_Entity.equals("Market")) && (!Managed_By.equals("McDonald's")) && (checkMarket == false))) {
                                    gridStatus = "Market";
                                }
                            } else if (Managed_By == "TMS" || Managed_By == "HAVI") {
                                CheckApprovalGridForHAVI_TMS = checkApprovalGrid.Check_HAVI_TMS_Approval_GRID(node, step, "XCM", marketName, Managed_By, null, "ONBRD/EXTND");
                                if (((Responsible_Entity.equals("Global")) && (CheckApprovalGridForHAVI_TMS != false)) || ((Responsible_Entity.equals("Market")) && (CheckApprovalGridForHAVI_TMS != false))) {
                                    gridStatus = "External";
                                } else if (((Responsible_Entity.equals("Global")) && (CheckApprovalGridForHAVI_TMS == false))) {
                                    gridStatus = "Global";
                                } else if (((Responsible_Entity.equals("Market")) && (CheckApprovalGridForHAVI_TMS == false))) {
                                    gridStatus = "Market";
                                }
                            } else if (Managed_By == "USA New Product Group") {
                                gridStatus = "Market";
                            }

                            if (productGroupValue == "SER") { //MDSIM-5237
                                reference1.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Active");
                            } else {
                                reference1.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending " + gridStatus + " Approval");
                            }
                        }
                    }
                }
            }
        }
    }
    //Quality Change - start
    var itemFacilityRefType = node.getValue("REF_ItemToFacility").getSimpleValue() + "";
    var facExtensionRef = step.getReferenceTypeHome().getReferenceTypeByID(itemFacilityRefType);
    //Quality Change - end
    var facExtensionRefObj = node.getReferences(facExtensionRef);

    for (var i = 0; i < facExtensionRefObj.size(); i++) {
        var addeddExtension = facExtensionRefObj.get(i).getTarget().getID();
        if (status == "Approve") {
            if (!Managed_By.equals("USA New Product Group")) {

                //MDSIM-5237 - start
                if (productGroupValue == "SER") {
                    facExtensionRefObj.get(i).getValue("SupplierItemMktApprovalStatus").setSimpleValue("Active");
                } else {
                    facExtensionRefObj.get(i).getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending " + gridStatus + " Approval");
                }
                //MDSIM-5237 - end
            } else {
                //MDSIM-5237 - start
                if (productGroupValue == "SER") {
                    facExtensionRefObj.get(i).getValue("SupplierItemMktApprovalStatus").setSimpleValue("Active");
                } else {
                    facExtensionRefObj.get(i).getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending Market Approval");
                }
                //MDSIM-5237 - end
            }
        } else if (status == "Reject") {
            facExtensionRefObj.get(i).getValue("SupplierItemMktApprovalStatus").setSimpleValue("Rejected");
        }
        //facExtensionRefObj.get(i).getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending " + gridStatus + " Approval");
    }
}


function populateMetaDataFromMcDToTemp(node, formattedTempObjectsRef, refType) {

    if (refType == "ItemToMarketExtension") {
        var references = node.getReferences().asSet().iterator();
        while (references.hasNext()) {
            var reference = references.next();
            if (reference.getReferenceType() == refType) {
                market = reference.getTarget().getName();
                marketID = reference.getTarget().getID();
                var status = reference.getValue("SupplierItemMktApprovalStatus").getSimpleValue();

                try {
                    var marketrefID = step.getEntityHome().getEntityByID(marketID);
                    var copiedref = formattedTempObjectsRef.createReference(marketrefID, refType);
                    if (status != null)
                        copiedref.getValue("SupplierItemMktApprovalStatus").setSimpleValue(status);
                    logger.info("-_-_-1-_-1-_-_-");
                } catch (e) {
                    // //logger.info("Exception while adding refrences:-_-_-_-_-_->" );
                }
            }
        }
    }

}

function populatereferencesforItem(node) {

    var nodereferences = node.getReferences().asSet().iterator();
    while (nodereferences.hasNext()) {
        var reference1 = nodereferences.next();
        if (reference1.getReferenceType() == "TempObjToItem") {
            logger.info("-_-4-_-");
            var facilityref = reference1.getTarget().getID();
            var facilityrefID = step.getProductHome().getProductByID(facilityref);
            logger.info(facilityref + "-_-populatereferencesforItem facilityrefID-_-" + facilityrefID);
            populateFacilityMktValuesForItemLib.populateFacilityMktValuesForItem(tempObj, node, step);
            delRejectReference(facilityrefID);
        }
    }
}

function addAI() {

    var references1 = node.getReferences().asSet().iterator();
    while (references1.hasNext()) {
        var reference1 = references1.next();
        if ((reference1.getReferenceType() == "PackCaseToAI")) {
            var assemblyref = reference1.getTarget().getID();
            var assemblyrefID = step.getProductHome().getProductByID(assemblyref);
            logger.info(assemblyref + "Exception is:-_-_-_-_-_->" + assemblyrefID);
            try {
                node.createReference(assemblyrefID, "RawItemToAI");
            } catch (e) {
                logger.info("Exception is:-_-_-_-_-_->" + e);
            }
        }
    }
}

function sendEmailtoSelectiveMarketUsers(targetMarketName, Category, GRID_type, user_group) {

    var Assigne_ID = "";
    var cat = "SIM_" + Category;
    var formattedEmail;

    var child_ent = step.getEntityHome().getEntityByID(GRID_type).getChildren().toArray();
    for (var i = 0; i < child_ent.length; i++) {
        if (targetMarketName == child_ent[i].getName()) {
            var Market_ID = child_ent[i].getID();
            Assigne_ID = step.getEntityHome().getEntityByID(Market_ID).getValue(cat).getSimpleValue();
        }
    }

    logger.info("-GRID_type-" + GRID_type + "-Assigne_ID-" + Assigne_ID + "-user_group-" + user_group);

    if (Assigne_ID != null) {
        var splits = Assigne_ID.split(",");
        for (var i = 0; i < splits.length; i++) {
            var userGroupID = splits[i];
            var userID = step.getUserHome().getUserById(userGroupID);
            if (null != userID) {
                if (null != userID.getEMail())
                    formattedEmail = formattedEmail + userID.getEMail() + ";";
            }

            if (null != formattedEmail) {
                sendEmail.sendRequestSubmissionToMarketQA(node, mailer, formattedEmail, step);
            }
        }
    }
}

function populateStatesOnEntryCreatedOn(node, attributeStateType) {

    var parsedDate = getCurrentDate.getCurrentDateInHHMMSS();

    var ReferenceType = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketCategory");
    if (ReferenceType != null) {
        var ReferenceTypes = node.getReferences(ReferenceType);
        if (ReferenceTypes.size() > 0) {
            for (var i = 0; i < ReferenceTypes.size(); i++) {
                var reference1 = ReferenceTypes.get(i);
                var facility = reference1.getTarget().getID();
                var references = node.getReferences().asSet().iterator();
                while (references.hasNext()) {
                    var reference = references.next()
                    if ((reference.getReferenceType() == "ItemToMarketExtension")) {
                        var marketid = reference.getTarget().getID();
                        var marketName = reference.getTarget().getName();
                        var status = reference.getValue("MarketExtensionStatus").getSimpleValue();
                        if ((status == "Approve") && (facility == marketid)) {
                            reference1.getValue(attributeStateType).setSimpleValue(parsedDate);
                        }
                    }
                }
            }
        }
    }
}

function populateValuesForAutoApproval(node) {

    var Responsible_Entity_check = node.getValue("ItemResponsibleEntity").getSimpleValue();
    var references1 = node.getReferences().asSet().iterator();
    while (references1.hasNext()) {
        var reference1 = references1.next();
        if ((reference1.getReferenceType() == "ItemToMarketExtension")) {
            var facilityref = reference1.getTarget().getID();
            var facilityrefID = step.getEntityHome().getEntityByID(facilityref);
            var status = reference1.getValue("MarketExtensionStatus").getSimpleValue();
			
			//MDSIM-7887-start
			var vendorDirect = reference1.getValue("IsVendorDirect").getSimpleValue();			
			
			//MDSIM-7887-end
			
            var references = node.getReferences().asSet().iterator();
            var temp = 0;
            while (references.hasNext()) {
                var reference = references.next();
                if (reference.getReferenceType() == "ItemToMarketCategory") {

                    try {
                        var check = reference.getTarget().getID();
                        var checkID = step.getEntityHome().getEntityByID(facilityref);
                        if (check == facilityref) {
                            var ItemToMarketCategoryRef = node.createReference(facilityrefID, "ItemToMarketCategory");
                            if (status == "Approve") {
                                ItemToMarketCategoryRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Active");
                            } else if (status == "Reject") {
                                ItemToMarketCategoryRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Rejected");
                            }
							
							//MDSIM-7887:updating the vendor direct flag
														
							ItemToMarketCategoryRef.getValue("IsVendorDirect").setSimpleValue(vendorDirect);
							
							//MDSIM-7887:end

                        }

                    } catch (e) {
                        //logger.info("Exception is:-_-_-_-_-_->" + e);
                    }
                }
            }
        }
        //Quality Change - start
        var itemFacilityExtRefType = node.getValue("REF_ItemToFacilityExtension").getSimpleValue() + "";
        var itemFacilityRefType = node.getValue("REF_ItemToFacility").getSimpleValue() + "";

        if ((reference1.getReferenceType() == itemFacilityExtRefType)) {
            var facilityref = reference1.getTarget().getID();
            var facilityrefID = step.getEntityHome().getEntityByID(facilityref);
            //Quality Change - end
            var Market_Status = reference1.getValue("FacilityApprovedCategory_Market_Status").getSimpleValue();
            var FacilityType = reference1.getValue("FacilityType").getSimpleValue();
            var IsShipPoint = reference1.getValue("IsShipPoint").getSimpleValue();
            var ItemShippedFacility = reference1.getValue("ItemShippedFacility").getSimpleValue();
            var ItemManufacturingPoint = reference1.getValue("ItemManufacturingPoint").getSimpleValue();
            var WSI = reference1.getValue("AdditionalPartyIdentification").getSimpleValue();
            var GLN = reference1.getValue("GLN").getSimpleValue();
            var ItemRelevantMarketCategory = reference1.getValue("ItemRelevantMarketCategory").getSimpleValue(); // Added by Sourav Tamli for MDSIM - 2618 //
            SupplierID = reference1.getValue("SupplierID").getSimpleValue();
            SupplierName = reference1.getValue("SupplierName").getSimpleValue();

            var references = node.getReferences().asSet().iterator();
            var temp = 0;
            while (references.hasNext()) {
                var reference = references.next();
                if (reference.getReferenceType() == itemFacilityRefType) {
                    try {
                        var check = reference.getTarget().getID();
                        var checkID = step.getEntityHome().getEntityByID(facilityref);
                        if (check == facilityref) {
                            var ItemTofacilityRef = node.createReference(facilityrefID, itemFacilityRefType);

                            ItemTofacilityRef.getValue("FacilityApprovedCategory_Market_Status").setSimpleValue(Market_Status);
                            ItemTofacilityRef.getValue("FacilityType").setSimpleValue(FacilityType);
                            ItemTofacilityRef.getValue("IsShipPoint").setSimpleValue(IsShipPoint);
                            ItemTofacilityRef.getValue("SupplierID").setSimpleValue(SupplierID);
                            ItemTofacilityRef.getValue("SupplierName").setSimpleValue(SupplierName);
                            ItemTofacilityRef.getValue("ItemManufacturingPoint").setSimpleValue(ItemManufacturingPoint);
                            ItemTofacilityRef.getValue("ItemShippedFacility").setSimpleValue(ItemShippedFacility);
                            ItemTofacilityRef.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Active");
                            ItemTofacilityRef.getValue("AdditionalPartyIdentification").setSimpleValue(WSI);
                            ItemTofacilityRef.getValue("GLN").setSimpleValue(GLN);
                            ItemTofacilityRef.getValue("ItemRelevantMarketCategory").setSimpleValue(ItemRelevantMarketCategory); // Added by Sourav Tamli for MDSIM - 2618 //

                        }
                    } catch (e) {
                        //logger.info("Exception is:-_-_-_-_-_->" + e);
                    }
                }
            }
        }
    }

}


function generateEmailForRejection(node, step, mailer, logger, formattedEmail, currentState, market) {
    var ReqNum = node.getValue("RequestNumber").getSimpleValue();
    var EnvType = node.getValue("EnvType").getSimpleValue();
    var SupplierNotification = node.getValue("SupplierNotification").getSimpleValue();
    var subject = "**********  Item Rejection ***************";
    var supplierEmailID = suppEmail.getItemToSupplierEmailID(node, step, logger);
    var tempformatemail = formattedEmail;
    //logger.info("-tempformatemail-"+tempformatemail);

    if (supplierEmailID != null) {
        //logger.info("-formattedEmail Start-"+formattedEmail);
        formattedEmail = formattedEmail + ";" + supplierEmailID;
        logger.info("-formattedEmail Bef-" + formattedEmail);
        /*
        var formattedEmailSplit = formattedEmail.split(";;");
        if(formattedEmailSplit.length>1)
        {
        	//logger.info("-formattedEmail Yes-"+formattedEmail);
        	formattedEmail = tempformatemail+supplierEmailID;
        }*/
    }
    logger.info("-formattedEmail Aft-" + formattedEmail);
    var body = "\n During item review process for item " + ReqNum + "  Market " + market + " has been Rejected by : " + currentState +
        "\n\n *** THIS IS A " + EnvType + " SYSTEM GENERATED EMAIL. PLEASE DO NOT REPLY. ***";

    formattedEmail = filter.filterOutEmailAddress(step, formattedEmail); //To Prevent sending mail to Business user from lower environment
    if (SupplierNotification == "true") {
        mailer.mail().addTo(formattedEmail).from("noreply@mcdonalds.com").subject(subject).plainMessage(body).send();
    }
}

function createTempObjforXCM(refType) {
    var Assigned_Group;
    var TriggerLater = false;
    var FlagCheckForXCMRouting = false;
    var checkProdCatgy = false;
    var CheckApprovalGridForHAVI_TMS = "";
    var marketCheckForMcClement = false;
    var ReferenceType = step.getReferenceTypeHome().getReferenceTypeByID(refType);
    if (ReferenceType != null) {
        var ReferenceTypes = node.getReferences(ReferenceType);
        if (ReferenceTypes.size() > 0) {

            for (var i = 0; i < ReferenceTypes.size(); i++) {
                FlagCheckForXCMRouting = false;
                var reference1 = ReferenceTypes.get(i);
                var targetMarketID = reference1.getTarget().getID();
                var targetMarketName = reference1.getTarget().getName();
                var status = reference1.getValue("MarketExtensionStatus").getSimpleValue();
                if (status == "Approve") {
                    if ((Managed_By == "HAVI") || (Managed_By == "TMS")) {
                        //checkProdCatgy = validateTMSHVAIProdCtgy(node, step, logger, targetMarketID);
                        CheckApprovalGridForHAVI_TMS = checkApprovalGrid.Check_HAVI_TMS_Approval_GRID(node, step, "XCM", targetMarketName, Managed_By, null, "ONBRD/EXTND");

                    }
                    var tempObj = null;
                    temp = 1;
                    marketCheckForMcClement = getMcClementMarkets(targetMarketID, node, step, logger);
                    if ((Responsible_Entity.equals("Global")) && (marketCheckForMcClement == false) && (Managed_By == "McClement") && (CheckApprovalGridForHAVI_TMS == false)) {
                        var region = get_region(targetMarketName);
                        var formattedTempObjects = node.getID() + "_" + region + "_" + "Task";

                    } else {
                        var formattedTempObjects = node.getID() + "_" + targetMarketID + "_" + "Task";
                    }

                    var formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);
                    logger.info(status + "formattedTempObjectsRef" + formattedTempObjectsRef);

                    var nodeTrim = node.getID();
                    var idSplit = nodeTrim.split("_");
                    var nodeTrimVal = "";
                    if (idSplit[idSplit.length - 1] != "Task") {
                        if (idSplit.length == 3 || idSplit.length == 2) {
                            nodeTrimVal = nodeTrim;
                        } else if (idSplit.length == 6) {
                            nodeTrimVal = idSplit[0] + "_" + idSplit[1] + "_" + idSplit[2];
                        } else if (idSplit.length == 5) {
                            nodeTrimVal = idSplit[0] + "_" + idSplit[1];
                        }
                    } else if (idSplit[idSplit.length - 1] == "Task") {
                        for (var s = 0; s < idSplit.length - 2; s++) {
                            if (s == idSplit.length - 3) {
                                nodeTrimVal = nodeTrimVal + idSplit[s];
                            } else {
                                nodeTrimVal = nodeTrimVal + idSplit[s] + "_";
                            }
                        }
                    }
                    logger.info("-nodeTrim-" + nodeTrimVal);
                    nodeTrim = nodeTrimVal;

                    var formattedTempObjectsVal = nodeTrim + "_" + targetMarketID + "_" + "Task";
                    var formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);

                    if (formattedTempObjectsRef == null) {
                        tempObj = step.getProductHome().getProductByID("McDonaldItemTemporaryObjects").createProduct(formattedTempObjects, "McDTargetMarketTempObject");
                        /*======MDSIM-5270======*/
                        var createdByValue = step.getCurrentUser().getID();
                        tempObj.getValue("CreatedBy").setSimpleValue(createdByValue);
                        /*======MDSIM-5270======*/
                        logger.info("Temp Obj-_-_->" + tempObj);
                    } else {
                        formattedTempObjects = formattedTempObjectsVal + "_" + Math.floor((Math.random() * 10000) + 1);
                        formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);

                        logger.info("before formattedTempObjects-" + formattedTempObjects);
                        while (formattedTempObjectsRef != null) {
                            logger.info("In While1");
                            formattedTempObjects = formattedTempObjectsVal + "_" + Math.floor((Math.random() * 10000) + 1);
                            formattedTempObjectsRef = step.getProductHome().getProductByID(formattedTempObjects);
                        }
                        logger.info("OutWhile" + formattedTempObjects);
                        if (formattedTempObjectsRef == null && tempObj == null) {
                            tempObj = step.getProductHome().getProductByID("McDonaldItemTemporaryObjects").createProduct(formattedTempObjects, "McDTargetMarketTempObject");
                            /*======MDSIM-5270======*/
                            var createdByValue = step.getCurrentUser().getID();
                            tempObj.getValue("CreatedBy").setSimpleValue(createdByValue);
                            /*======MDSIM-5270======*/
                        }
                        logger.info("-tempObj-" + tempObj);
                    }

                    copyAttributesLib.copyAttributes(node, formattedTempObjects, step);
                    var itemToFacilityExtRefType = node.getValue("REF_ItemToFacilityExtension").getSimpleValue() + ""; //Quality Change
                    createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, itemToFacilityExtRefType);
                    createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "PackCaseToAI");
                    createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "TempItemToPack");
                    createfacilityReferenceLib.createMcdfacilityReference(node, step, logger, tempObj, "TempObjectToMcD");
                    createSupplierReferenceForTemp(tempObj);
                    createfacilityReferenceLib.createfacilityReferenceformrkt(node, step, logger, tempObj, "ItemToMarketExtension", targetMarketName);
                    createfacilityReferenceLib.createfacilityReferenceformrkt(node, step, logger, tempObj, "ItemToMarketCategory", targetMarketName);
                    populateFacilityValuesForMrktExtension(tempObj);
					
					
					//MDSIM-7887-start
					//marketCategory.updateVendorDirectFlag(node,tempObj,step,logger);
					//MDSIM-7887-end

                    //Grid Sourcing or facility Selection.
                    logger.info("-calling SelectApprovalGrid-" + tempObj.getID());
                    var gridselectionstatus = SelectApprovalGrid(tempObj);



                    //***US : 3948-> Implementation Started*****//
                    //user_group = checkApprovalGrid.delegateRequestToApprovalGrid(node, step, logger, targetMarketID, targetMarketName, Category_ID_Code, Category, inputUserId, "1", tempObj, lookup); //MDSIM-4666 added user_group assignment.
                    //***US : 3948-> Implementation Ended*****//

                    //MDSIM - 4666 fix by Sourav Tamli :: Started//
                    var CheckMcClementMarket = step.getListOfValuesHome().getListOfValuesByID("McClementXCMMarkets").getListOfValuesValueByID(targetMarketID);
                    if (CheckMcClementMarket != null && Managed_By == "McClement") {

                        FlagCheckForXCMRouting = true;

                    } else if (Managed_By == "HAVI" || Managed_By == "TMS") {

                        CheckApprovalGridForHAVI_TMS = checkApprovalGrid.Check_HAVI_TMS_Approval_GRID(node, step, "XCM", targetMarketName, Managed_By, null, "ONBRD/EXTND");
                        if (CheckApprovalGridForHAVI_TMS != "DATATEAMUSER" && CheckApprovalGridForHAVI_TMS != "" && CheckApprovalGridForHAVI_TMS != false) {

                            FlagCheckForXCMRouting = true;

                        }

                    }
                    if (FlagCheckForXCMRouting) {
                        //If user group is related TMS/HAVI/McClement comes here
                        if (inputUserId == null) {
                            Assigned_Group = approvalLib.getApproverFromItemHierarchy(node, step, "XCM", targetMarketName, Managed_By, lookup);
                        }

                        tempObj.getValue("TempGlobalMarket").setSimpleValue("External");
                        tempObj.getValue("TradeItemStatus").setSimpleValue("Pending External Approval");
                        tempObj.getValue("ITEMTEMPASSIGNEE").setSimpleValue(Assigned_Group);

                    } else {
                        if (inputUserId == null) {
                            Assigned_Group = approvalLib.getApproverFromItemHierarchy(node, step, null, targetMarketName, Managed_By, lookup);
                        }
                        var AICategory = getAICategory(node);
                        if (AICategory == "GEO" || AICategory == "GBL") {

                            tempObj.getValue("TempGlobalMarket").setSimpleValue("Global");
                            tempObj.getValue("TradeItemStatus").setSimpleValue("Pending Global Approval");
                            tempObj.getValue("ITEMTEMPASSIGNEE").setSimpleValue(Assigned_Group);
                            populateStatesOnEntryCreatedOn(node, "GlobalQATempObjOnEntryCreatedOn");

                        } else if (AICategory == "NON") {

                            tempObj.getValue("TempGlobalMarket").setSimpleValue("Market");
                            tempObj.getValue("TradeItemStatus").setSimpleValue("Pending Market Approval");
                            tempObj.getValue("ITEMTEMPASSIGNEE").setSimpleValue(Assigned_Group);
                            populateStatesOnEntryCreatedOn(node, "MarketQATempObjOnEntryCreatedOn");

                        }

                    }
                    //MDSIM - 4666 fix by Sourav Tamli :: Ended//

                    // MDSIM - 5351 ::: Implementation Started by Sourav Tamli //
                    var CheckTheInitiatorWithApprover = CheckInitiatorIDWithApprovers(Assigned_Group, InitiatorID, step);
                    if (CheckTheInitiatorWithApprover) {

                        tempObj.getValue("ApproverMatch").setSimpleValue("Yes");
                        TriggerLater = true;

                    }
                    // MDSIM - 5351 ::: Implementation Ended by Sourav Tamli //

                    if ((!tempObj.isInWorkflow("NewItemOnboarding")) && (TriggerLater == false)) {
                        step.getWorkflowHome().getWorkflowByID("NewItemOnboarding").start(tempObj, "workflow triggered sucessfully");


                    } else if (TriggerLater) {

                        node.getValue("TriggerPending").addValue(tempObj.getID());

                    }
                } else if (status == "Reject") {
                    logger.info("-_-_-_-_-_-Inside Reject If-_-_-");
                    populateFacilityValuesForMrktExtension(node);
                }
            }

        }
    }

    logger.info("-_-_-_-_-_-Exit While Loop For createTempObjforMarket Function -_-_-");
}

function get_Approval_GRID_users(targetMarketName, Category, GRID_type, user_group) {
    var getUser = false;
    var count = 0;
    var user_flag = 0;
    var Assigne_ID = "";
    var cat = "SIM_" + Category;

    var child_ent = step.getEntityHome().getEntityByID(GRID_type).getChildren().toArray();
    for (var i = 0; i < child_ent.length; i++) {
        if (targetMarketName == child_ent[i].getName()) {
            var Market_ID = child_ent[i].getID();
            Assigne_ID = step.getEntityHome().getEntityByID(Market_ID).getValue(cat).getSimpleValue();
        }
    }
    logger.info("-GRID_type-" + GRID_type + "-Assigne_ID-" + Assigne_ID + "-user_group-" + user_group);
    var Team_Users = step.getGroupHome().getGroupByID("Approval_Grid_Users").getUsers().toArray();

    if (Assigne_ID != null) {
        for (var index = 0; index < Team_Users.length; index++) {
            var splits = Assigne_ID.split(",");
            if (splits.length > 0) {
                getUser = true;
                return getUser;
            }
        }

    }

}
// Not in Use ::: Sourav Tamli //
function validateTMSHVAIProdCtgy(node, step, logger, targetMarketID) {
    var lookupProductCategoryInfo = "";
    var boolenflag = false;
    var Managed_By = node.getValue("ItemManagedBy").getSimpleValue();
    if (productGroupValue == "SER") Managed_By = ""; //MDSIM-5237
    var ProductCategory = node.getValue("ProductCategory").getSimpleValue();
    if ((Managed_By == "HAVI") || (Managed_By == "TMS")) {
        if (Managed_By == "HAVI") {
            lookupProductCategoryInfo = lookup.getLookupTableValue("LookupCheckListHaviApprovalUsers", targetMarketID);
        } else if (Managed_By == "TMS") {
            lookupProductCategoryInfo = lookup.getLookupTableValue("LookupCheckListTMSApprovalUsers", targetMarketID);
        }

        if ((lookupProductCategoryInfo != null) && (lookupProductCategoryInfo != "")) {
            var lookupProductCategoryInfo1 = lookupProductCategoryInfo.split("\\|");
            if (!boolenflag) {
                for (var counter = 0; counter < lookupProductCategoryInfo1.length; counter++) {

                    logger.info(" ProductCategory = " + ProductCategory + " lookupProductCategoryInfo1[counter] = " + lookupProductCategoryInfo1[counter]);
                    if ((ProductCategory.equalsIgnoreCase(lookupProductCategoryInfo1[counter]))) {
                        boolenflag = true;
                    }
                }
            }
        }
    }
    return boolenflag;
}

function getMcClementMarkets(marketID, node, step, logger) {
    logger.info("-_-_-_-_-_-_-_-_- Inside getMcClementMarkets Function -_-_-_-_-_-_-_-_-");
    var lov = step.getListOfValuesHome().getListOfValuesByID("McClementXCMMarkets").getListOfValuesValueByID(marketID);
    logger.info("lov-_-_-_->" + lov);
    if (lov != null) {
        return true;
    } else {
        return false;
    }

}

function getAICategory(node) {

    var packCaseToAIRefs = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("PackCaseToAI")).toArray();
    var MP_Object;
    var AI_Object;
    var AICategory;
    for (var ref = 0; ref < packCaseToAIRefs.length; ref++) {

        MP_Object = packCaseToAIRefs[ref].getTarget();
        AI_Object = MP_Object.getParent();
        AICategory = AI_Object.getValue("AICategory").getID();

    }

    return AICategory;
}

// Added by Sourav Tamli for MDSIM - 5351 //
function CheckInitiatorIDWithApprovers(user_group, InitiatorID, step) {

    var MatchFound = false;
    var FetchUserGroupFRomStep = step.getGroupHome().getGroupByID(user_group);
    logger.info("FetchUserGroupFRomStep::" + FetchUserGroupFRomStep);
    var UsersAssignedInGroup = FetchUserGroupFRomStep.getUsers().toArray();
    for (var i = 0; i < UsersAssignedInGroup.length; i++) {

        if (UsersAssignedInGroup[i].getID() == InitiatorID) {

            MatchFound = true;
            break;

        }

    }

    logger.info("MatchFound ::" + MatchFound);
    return MatchFound;

}
  </javaScript>
</config>
Action #2 (JavaScriptBusinessActionWithBinds):
<config>
  <bindings>
    <binding alias="node" type="Node" contract="CurrentObjectBindContract"/>
    <binding alias="step" type="Manager" contract="ManagerBindContract"/>
    <binding alias="logger" type="Logger" contract="LoggerBindContract"/>
    <binding alias="mailer" type="MailHome" contract="MailHomeBindContract"/>
    <binding alias="workflow" type="Workflow" contract="CurrentWorkflowBindContract"/>
  </bindings>
  <messages>
    <message key="errorMessage">
      <default>{msg}</default>
    </message>
  </messages>
  <javaScript>
//********************** 2 ***************************

/*************************************************************
Rule Name: Creation of McDonald Item and WRIN# Generation.
Developed: Suresh Maddula/ Shiva Dayal 
Summary: This business rule will create McDonald Item when Data Team Approves the Pack/Case supplied by the Supplier.
/*************************************************************/
var packToAIref;
var matchfound = "";
fetchUserDefinedHierarchy();
var objTypeID = node.getObjectType().getID();
var McDitem;
var temp = 0;
var v_mcDitem_val = 0;
var PreferredPrefix = node.getValue("PreferredPrefix").getSimpleValue();
delRejectReference(node);
var WRINGeneration = step.getProductHome().getProductByID("McDonaldRawItem").getValue("WRINGeneration").getSimpleValue();
var suppStatus = node.getValue("SupplierRevisionRequired").getSimpleValue();
var ReferenceType = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension");
var MatchedItem = node.getValue("MatchedItem").getSimpleValue();
var Managed_By = node.getValue("ItemManagedBy").getSimpleValue();
var productGroup = node.getValue("ProductGroup").getSimpleValue();
var productGroupID = node.getValue("ProductGroup").getID(); //MDSIM-4666
var ComTradeItemVolume, ComTradeItemWeight, ComTradeItemHeight;

var IsLiquid = node.getValue("IsLiquid").getSimpleValue();
var ProductCategory = node.getValue("ProductCategory").getSimpleValue();
var TradeItemFlavour = node.getValue("TradeItemFlavour").getSimpleValue();
var IsPortionControlled = node.getValue("IsPortionControlled").getSimpleValue();
var PromotionName = node.getValue("PromotionName").getSimpleValue();
var PromotionType = node.getValue("PromotionType").getSimpleValue();

var TradeItemHeight = node.getValue("TradeItemHeight").getSimpleValue();
ComTradeItemHeight = getUOMConversion("TradeItemHeight", TradeItemHeight);
var TradeItemWidth = node.getValue("TradeItemWidth").getSimpleValue();
ComTradeItemWidth = getUOMConversion("TradeItemWidth", TradeItemWidth);
var TradeItemDepth = node.getValue("TradeItemDepth").getSimpleValue();
ComTradeItemDepth = getUOMConversion("TradeItemDepth", TradeItemDepth);
var TradeItemWeight = node.getValue("TradeItemWeight").getSimpleValue();
ComTradeItemWeight = getUOMConversion("TradeItemWeight", TradeItemWeight);
var TradeItemVolume = node.getValue("TradeItemVolume").getSimpleValue();
ComTradeItemVolume = getUOMConversion("TradeItemVolume", TradeItemVolume);
var Gender = node.getValue("Gender").getSimpleValue();
logger.info(node.getValue("AttributesforWRIN").getSimpleValue() + "-Gender -" + Gender);

// **************** Coding for WRIN Suffix Gaps Started ********************
var matchFound1 = 0;
var Gender = node.getValue("Gender").getSimpleValue();
var matchFound1Suffix = 0;
var suffixFound = 0;
var formattedPrefixSuffix = 0;
var mcdProdReference = step.getProductHome().getProductByID(packToAIref);
logger.info("-_-_-_-" + mcdProdReference);
var mcdProductID = mcdProdReference.getID();
logger.info("-_-mcdProductID-_-" + mcdProductID);
var MissingSuffixesForPrefix = mcdProdReference.getValue("MissingSuffixesForPrefix").getSimpleValue();
var Case;
// **************** Coding for WRIN Suffix Gaps Ended ********************



// ***** Concurrency Started
var IsPrefixMigrated = mcdProdReference.getValue("IsPrefixMigrated").getSimpleValue();
logger.info("-_-IsPrefixMigrated-_-" + IsPrefixMigrated);
// ***** Concurrency Ended


var MarketRef = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension")).toArray();

logger.info("-MarketRef.length -" + MarketRef.length);

if (suppStatus != "Yes" && (MarketRef.length >= 1)) {
    if (MatchedItem != null) {
        //Creating the PackToMcDonaldItem reference.
        var MatchedItem = node.getValue("MatchedItem").getSimpleValue();
        var mcdidreference = step.getProductHome().getProductByID(MatchedItem);
        if (mcdidreference == null) {
            throw "Selected " + MatchedItem + " is not available in the system.";
        }
        node.createReference(mcdidreference, "PackToMcDonaldItem");

        //Started Prod Fix -_-_-_-0322
        getMcDItemByPackaging();
        populateMrktReferences(McDitem, node, "ItemToMarketCategory");

        //Ended Prod Fix -_-_-_-0322

        //Populating the WRIn values from Mcd to Case/Pack

        node.getValue("WRINPrefix").setSimpleValue(mcdidreference.getValue("WRINPrefix").getSimpleValue());
        node.getValue("WRINSuffix").setSimpleValue(mcdidreference.getValue("WRINSuffix").getSimpleValue());
        node.getValue("WRINNUMBER").setSimpleValue(mcdidreference.getValue("WRINNUMBER").getSimpleValue());
        var rawItemIdentifier = node.getValue("a_mm_DevSUIdentifier").getSimpleValue();
        var concatenatedRawItemIdentifier = rawItemIdentifier;
        var concatenatedRawItemIdentifier = step.getProductHome().getProductByID(concatenatedRawItemIdentifier);
        if (concatenatedRawItemIdentifier != null) {
            concatenatedRawItemIdentifier.getValue("a_mm_DevSUIdentifier").setSimpleValue(MatchedItem);
            concatenatedRawItemIdentifier.startWorkflowByID("wf_mm_SIMOnboardingResponseForDevSU", "Initiated in wf_mm_SIMOnboardingResponseForDevSU");
        }
    } else if (ReferenceType != null) {
        var ReferenceTypes = node.getReferences(ReferenceType);
        //logger.info(ReferenceTypes.size()+"-_-ReferenceTypes.length-_-");								
        if (ReferenceTypes.size() > 0) {
            fetchUserDefinedHierarchy(node);
            var AIRef = step.getProductHome().getProductByID(packToAIref);
            var AIRefID = AIRef.getID();
            checkSuffixAttributesByPrdGrp(node, AIRefID);
        }
    }


    var nodePrefix = node.getValue("WRINPrefix").getSimpleValue();
    var nodeSuffix = node.getValue("WRINSuffix").getSimpleValue();

    logger.info("-nodePrefix.length -" + nodePrefix);
    logger.info("-nodeSuffix.length -" + nodeSuffix);

    if (nodePrefix == "" || nodeSuffix == "" || nodePrefix == null || nodeSuffix == null) {
        throw "Due to some Technical glitch unable to Process the request.Please Click on Submit Button and resubmit the request from Data Team.";
    }

    setWRINtoTempObjects();
    var McDitemReference = getMcDItemByPackaging();

    generateObjNameLib.generateObjName(node, step, logger);
    var mcd = getMcDItem(node);
    generateObjNameLib.generateObjName(mcd, step, logger);

    //Purpose of the change is to populate GTIN to supplier item from Case/Pack or vice versa.As we have removed GTIN from CopyAttribute Group
    //MDSIM:3864-Started:Added the below condition to handle match Item. By Debajit July 16, 2020
    var siGTIN = mcd.getValue("GTIN").getSimpleValue();
    if (siGTIN != null && siGTIN.substring(0, 8) == "50195500") {
        node.getValue("GTIN").setSimpleValue(siGTIN);
        node.getValue("IsNewItem").setSimpleValue("Yes");
    } else if (siGTIN != null && siGTIN.substring(0, 8) != "50195500") {
        node.getValue("GTIN").setSimpleValue(siGTIN);
        node.getValue("IsNewItem").setSimpleValue("No");
    } else {
        mcd.getValue("GTIN").setSimpleValue(node.getValue("GTIN").getSimpleValue());
    }
    //MDSIM:3864-Ended:Added the below condition to handle match Item. By Debajit July 16, 2020
    McDitemReference.approve();
}

//Adding To McDonald Product Is PrefixesMigrated to Yes.
mcdProdReference.getValue("IsPrefixMigrated").setSimpleValue("Yes");

//moved - start
// To set the value at Supplier Item Level
var McDItemRef = step.getReferenceTypeHome().getReferenceTypeByID("PackToMcDonaldItem");
var SupplierItem = node.getReferences(McDItemRef);
logger.info("SupplierItem: " + SupplierItem);
for (var i = 0; i < SupplierItem.size(); i++) {
    var mcdProduct = SupplierItem.get(i).getTarget();
    if (node.getValue("ItemNote").getSimpleValue() != null) {
        //mcdProduct.getValue("ItemNote").addValue(node.getValue("ItemNote").getSimpleValue());
        var ItemComments = node.getValue("ItemNote").getSimpleValue();
        var commentsSplit = ItemComments.split('<multisep/>');
        for (var j = 0; j < commentsSplit.length; j++) {
            logger.info("Splited comments: " + commentsSplit[j]);
            mcdProduct.getValue("ItemNote").addValue(commentsSplit[j]);
        }
    }

}
//moved - end

approveAllObjectsLib.approveAllObjects(node, step, logger);

function checkSuffixAttributesByPrdGrp(McDitem, AIRefID) {
    logger.info(McDitem.getID() + "-_- MCDITEMproductGroup In checkSuffixAttributesByPrdGrp-_-_-_-_-_-_-_-_-_-> " + productGroup);
    var AttributesforWRIN;
    var GTIN = node.getValue("GTIN").getSimpleValue();
    if (objTypeID == "Pack") {
        logger.info("-_-2-_-_-_-_-");
        var packReferences = node.getReferencedByProducts().toArray();
        for (var counter = 0; counter < packReferences.length; counter++) {
            if ((packReferences[counter].getReferenceType() == "PackagingCaseToPack")) {
                Case = packReferences[counter].getSource();
                GTIN = Case.getValue("GTIN").getSimpleValue();
            }
        }
    }
    var v_mcDitem_GTIN;

    var productGroupID = node.getValue("ProductGroup").getID(); //MDSIM-4666
    if (productGroupID == "F" && IsLiquid == "Yes") {
        var WRINPrefixAttributesforFoodLiquid = productGroup + ";" + IsLiquid + ";" + ProductCategory + ";" + TradeItemFlavour + ";" + ComTradeItemVolume + ";" + ComTradeItemWeight + ";" + IsPortionControlled;
        var wrinSuffixAttrforFoodLiquid = McDitem.getValue("WRINSuffixAttributesforFood-Liquid").getSimpleValue();
        var wrinAttributesforFoodLiquid = WRINPrefixAttributesforFoodLiquid + ";" + wrinSuffixAttrforFoodLiquid + ";";
        McDitem.getValue("WRINPrefixAttributesforFoodLiquid").setSimpleValue(WRINPrefixAttributesforFoodLiquid);
        node.getValue("WRINPrefixAttributesforFoodLiquid").setSimpleValue(WRINPrefixAttributesforFoodLiquid);
        McDitem.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforFoodLiquid);
        node.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforFoodLiquid);
    } else if (productGroupID == "F" && IsLiquid == "No") {
        var wrinPrefixAttrforFoodNonLiquid = productGroup + ";" + IsLiquid + ";" + ProductCategory + ";" + ComTradeItemHeight + ";" + ComTradeItemWidth + ";" + ComTradeItemDepth + ";" + TradeItemFlavour + ";" + ComTradeItemWeight + ";" + IsPortionControlled;
        var wrinSuffixAttrforFoodNonLiquid = McDitem.getValue("WRINSuffixAttributesforFoodNonLiquid").getSimpleValue();
        var wrinAttributesforFoodNonLiquid = wrinPrefixAttrforFoodNonLiquid + ";" + wrinSuffixAttrforFoodNonLiquid + ";";
        McDitem.getValue("WRINPrefixAttributesforFoodNonLiquid").setSimpleValue(wrinPrefixAttrforFoodNonLiquid);
        node.getValue("WRINPrefixAttributesforFoodNonLiquid").setSimpleValue(wrinPrefixAttrforFoodNonLiquid);
        McDitem.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforFoodNonLiquid);
        node.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforFoodNonLiquid);
    } else if ((productGroup == "Operating Supplies") || (productGroup == "Uniforms") || (productGroup == "Miscellaneous")) {
        McDitem.getValue("ConvertTradeItemVolume").setSimpleValue(ComTradeItemVolume);
        node.getValue("ConvertTradeItemVolume").setSimpleValue(ComTradeItemVolume);
        McDitem.getValue("ConvertTradeItemWeight").setSimpleValue(ComTradeItemWeight);
        node.getValue("ConvertTradeItemWeight").setSimpleValue(ComTradeItemWeight);
        var wrinPrefixAttrforOperational = productGroup + ";" + ComTradeItemHeight + ";" + ComTradeItemWidth + ";" + ComTradeItemDepth + ";" + IsPortionControlled + ";" + TradeItemFlavour;
        var wrinSuffixAttrforOperational = McDitem.getValue("WRINSuffixAttributesforOpsSupply").getSimpleValue();
        var wrinAttributesforOperational = wrinPrefixAttrforOperational + ";" + wrinSuffixAttrforOperational + ";";
        McDitem.getValue("WRINPrefixAttributesforOpsSupply").setSimpleValue(wrinPrefixAttrforOperational);
        node.getValue("WRINPrefixAttributesforOpsSupply").setSimpleValue(wrinPrefixAttrforOperational);
        McDitem.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforOperational);
        node.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforOperational);
    } else if ((productGroupID == "SER")) //MDSIM-5237 - start
    {
        var itemShortDescription = node.getValue("TradeItemShortDescription").getSimpleValue();
        var itemLongDescription = node.getValue("TradeItemLongDescription").getSimpleValue();
        var itemToSupplierArray = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToSupplier")).toArray();
        var supplierName = "";
        for (var ref = 0; ref < itemToSupplierArray.length; ref++) {
            if (supplierName == "") {
                supplierName = itemToSupplierArray[ref].getTarget().getName();
            } else {
                supplierName = supplierName + "," + itemToSupplierArray[ref].getTarget().getName();
            }
        }

        var wrinPrefixAttrforServices = productGroup + ";" + ProductCategory + ";" + itemShortDescription + ";" + itemLongDescription + ";" + supplierName;
        //var wrinSuffixAttrforServices = McDitem.getValue("WRINSuffixAttributesforServices").getSimpleValue();
        //var wrinAttributesforServices = wrinPrefixAttrforServices + ";" + wrinSuffixAttrforServices + ";";
        var wrinAttributesforServices = wrinPrefixAttrforServices + ";";
        //McDitem.getValue("WRINPrefixAttributesforServices").setSimpleValue(wrinPrefixAttrforServices);
        //node.getValue("WRINPrefixAttributesforServices").setSimpleValue(wrinPrefixAttrforServices);
        McDitem.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforServices);
        node.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforServices);
    } //MDSIM-5237 - end
    else if (productGroup == "Paper & Packaging") {
        McDitem.getValue("ConvertTradeItemWeight").setSimpleValue(ComTradeItemWeight);
        node.getValue("ConvertTradeItemWeight").setSimpleValue(ComTradeItemWeight);
        var WRINPrefixAttrforPackaging = productGroup + ";" + ComTradeItemHeight + ";" + ComTradeItemWidth + ";" + ComTradeItemDepth;
        var wrinSuffixAttrforPackaging = McDitem.getValue("WRINSuffixAttributesforPackaging").getSimpleValue();
        var wrinAttributesforPackaging = WRINPrefixAttrforPackaging + ";" + wrinSuffixAttrforPackaging + ";";
        McDitem.getValue("WRINPrefixAttributesforPackaging").setSimpleValue(WRINPrefixAttrforPackaging);
        node.getValue("WRINPrefixAttributesforPackaging").setSimpleValue(WRINPrefixAttrforPackaging);
        McDitem.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforPackaging);
        node.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforPackaging);
    } else if (productGroup == "Promotions") {
        var WRINPrefixAttrforPremium = productGroup + ";" + PromotionName + ";" + PromotionType;
        var wrinSuffixAttrforPremium = McDitem.getValue("WRINSuffixAttributesforToys").getSimpleValue();
        var wrinAttributesforPremium = WRINPrefixAttrforPremium + ";" + wrinSuffixAttrforPremium + ";";
        McDitem.getValue("WRINPrefixAttributesforToys").setSimpleValue(WRINPrefixAttrforPremium);
        node.getValue("WRINPrefixAttributesforToys").setSimpleValue(WRINPrefixAttrforPremium);
        McDitem.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforPremium);
        node.getValue("AttributesforWRIN").setSimpleValue(wrinAttributesforPremium);
    }

    AttributesforWRIN = node.getValue("AttributesforWRIN").getSimpleValue();
    logger.info("-AttributesforWRIN-" + AttributesforWRIN);
    if (AttributesforWRIN != null) {
        var v_WRINNumResults = step.getProductHome().getProductByID(AIRefID).getChildren();
        if (v_WRINNumResults.size() > 0) {
            for (var v_ctr = 0; v_ctr < v_WRINNumResults.size(); v_ctr++) {
                var v_mcDitem = v_WRINNumResults.get(v_ctr);
                var v_mcDitem_val = v_mcDitem.getID();
                var packsubstr = v_mcDitem_val.substring(0, 2);

                if (v_mcDitem_val != McDitem.getID()) {
                    //logger.info(AIRefID + "-_-_-McDitem.getID-_-" + v_mcDitem_val);
                    var AttributesforWRINSys = v_mcDitem.getValue("AttributesforWRIN").getSimpleValue();
                    var AttributesforWRINVal = McDitem.getValue("AttributesforWRIN").getSimpleValue();
                    var productGroupSys = v_mcDitem.getValue("ProductGroup").getSimpleValue();
                    var productGroupVal = McDitem.getValue("ProductGroup").getSimpleValue();
                    v_mcDitem_GTIN = v_mcDitem.getValue("GTIN").getSimpleValue();

                    if ((AttributesforWRINVal == AttributesforWRINSys) && (productGroupSys == productGroupVal)) {
                        logger.info(v_mcDitem.getValue("AttributesforWRIN").getSimpleValue() + "-_-_-Before setting-_-> " + v_mcDitem);
                        logger.info(node.getValue("AttributesforWRIN").getSimpleValue() + "-_-_-Before setting-_-> " + node);
                        node.getValue("WRINPrefix").setSimpleValue(v_mcDitem.getValue("WRINPrefix").getSimpleValue());
                        node.getValue("WRINSuffix").setSimpleValue(v_mcDitem.getValue("WRINSuffix").getSimpleValue());
                        node.getValue("WRINNUMBER").setSimpleValue(v_mcDitem.getValue("WRINNUMBER").getSimpleValue());

                        if ((packsubstr == "SI") && (GTIN == v_mcDitem_GTIN)) {
                            temp = 1;
                            matchfound = v_mcDitem_val;
                        } else {
                            temp = 0;
                        }
                    }
                }
            }
        }
        logger.info("-_-_-temp-_-_-for WRIN-_-_-_-> " + temp);
        if (temp == 0) {
            if (WRINGeneration == "Yes") {
                generateWRIN(AIRef, McDitem);
            }
            generateMcDItem(AIRef);
            logger.info("-_-McDitem- -" + McDitem);
        } else {
            logger.info("-SHIVAAA-" + matchfound);
            var mcdidreference = step.getProductHome().getProductByID(matchfound);
            node.createReference(mcdidreference, "PackToMcDonaldItem");
            var pack = getpack();
            //the below code is used to populate markets for the existing SI item.
            var marcatRef = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketCategory");
            var marcatRefObj = node.getReferences(marcatRef);

            for (var cm = 0; cm < marcatRefObj.size(); cm++) {
                var marCategory = marcatRefObj.get(cm).getTarget();
                var ItemLocalNumber = marcatRefObj.get(cm).getValue("ItemLocalNumber").getSimpleValue();
                try {
                    var mcdreference = mcdidreference.createReference(marCategory, "ItemToMarketCategory");
                    if (ItemLocalNumber != "" && ItemLocalNumber != null) {

                        mcdreference.getValue("ItemLocalNumber").setSimpleValue(ItemLocalNumber);

                    }
                    mcdreference.getValue("DataTeamOnEntryCreatedOn").setSimpleValue(marcatRefObj.get(cm).getValue("DataTeamOnEntryCreatedOn").getSimpleValue());
                    mcdreference.getValue("DataTeamOnExitCreatedOn").setSimpleValue(marcatRefObj.get(cm).getValue("DataTeamOnExitCreatedOn").getSimpleValue());
                } catch (e) {
                    logger.info("-Exception ItemToMarketCategory is-" + e);
                    //throw e;
                }
            }
            //mcdidreference.approve(); 0413
        }
    }
}

//This function is used to convert the current uom into standard uom.
function getUOMConversion(attribute, value) {
    var convertedValue;
    if (value != null) {
        var valueSplit = value.split(" ");

        if (attribute == "TradeItemVolume") {
            if (valueSplit[1] == "gal") {
                convertedValue = valueSplit[0] * 128 + " fl oz (US)";
            } else if (valueSplit[1] == "l") {
                convertedValue = valueSplit[0] * 33.814 + " fl oz (US)";
            } else if (valueSplit[1] == "ml") {
                convertedValue = valueSplit[0] * 0.033814 + " fl oz (US)";
            } else {
                convertedValue = value;
            }
        } else if (attribute == "TradeItemWeight") {
            if (valueSplit[1] == "g") {
                convertedValue = valueSplit[0] * 0.001 + " kg";
            } else if (valueSplit[1] == "lb") {
                convertedValue = valueSplit[0] * 0.453592 + " kg";
            } else if (valueSplit[1] == "oz") {
                convertedValue = valueSplit[0] * 0.0283495 + " kg";
            } else {
                convertedValue = value;
            }
        } else if (attribute == "TradeItemDepth" || attribute == "TradeItemWidth" || attribute == "TradeItemHeight") {
            if (valueSplit[1] == "in") {
                convertedValue = valueSplit[0] * 2.54 + " cm";
            } else if (valueSplit[1] == "ft") {
                convertedValue = valueSplit[0] * 30.48 + " cm";
            } else if (valueSplit[1] == "m") {
                convertedValue = valueSplit[0] * 100 + " cm";
            } else {
                convertedValue = value;
            }
        }
    }
    return convertedValue;
}

//This is used to get AI reference which have taken place from portal and save it in an attribute.
function fetchUserDefinedHierarchy() {
    var references = node.getProductReferences().asSet().iterator();
    while (references.hasNext()) {
        var reference = references.next();
        if (reference.getReferenceType() == "PackCaseToAI") {
            packToAIref = reference.getTarget().getID();
        }
    }
}

//This function is used to create the facility reference of pack to newly created McDonaldItem.
function createfacilityReference(mcdItem, node) {
    logger.info("In CREATE FACILITYREF.-_-_-_-_-_->" + mcdItem);
    var references = node.getProductReferences().asSet().iterator();
    while (references.hasNext()) {
        var reference = references.next();
        if (reference.getReferenceType() == "PackCaseToAI") {
            logger.info("-_-_-Inside ItemToFacilityExtension-_-_-_-_-_-_-_-");
            var airef = reference.getTarget().getID();
            var airefID = step.getProductHome().getProductByID(airef);
            try {
                var itemToAI = mcdItem.createReference(airefID, "RawItemToAI");
                logger.info("-_-_-Inside ItemToFacility Referenced-_-_-_-_-_-_-_-");
            } catch (e) {
                logger.info("Exception RawItemToAI is:-_-_-_-_-_->" + e);
                //throw e;
            }
        }
    }
}

//This function is used to populate facility metadata from Pack/Case to McDitem.
function populateFacilityValues(supplierItem) {
    logger.info("populateFacilityValues Inside-_-_-_-_-_-_-_->>");
    var ItemToFacilityID;
    var ItemToFacilityRefList = new java.util.ArrayList();
    var supplierIDRef = step.getProductHome().getProductByID(supplierItem);

    var Market_Status = "";
    var FacilityType = "";
    var IsShipPoint = "";
    var SupplierID = "";
    var SupplierName = "";
    var suppreff = "";
    //Quality Change - start
    var references1 = node.getReferences().asSet().iterator();
    var itemFacilityExtRefType = supplierItem.getValue("REF_ItemToFacilityExtension").getSimpleValue() + "";
    var addedExtensionRef = step.getReferenceTypeHome().getReferenceTypeByID(itemFacilityExtRefType);

    var itemSupplierRefType = supplierItem.getValue("REF_ItemToSupplier").getSimpleValue() + "";
    //Quality Change - end
    var addedExtensionRefObj = node.getReferences(addedExtensionRef);
    logger.info("Facility Size-" + addedExtensionRefObj.size());
    var count = 0;

    while (references1.hasNext()) {
        var reference1 = references1.next();
        if (reference1.getReferenceType() == itemFacilityExtRefType) {
            count++;
            var Market_Status = reference1.getValue("FacilityApprovedCategory_Market_Status").getSimpleValue();
            var FacilityType = reference1.getValue("FacilityType").getSimpleValue();
            var IsShipPoint = reference1.getValue("IsShipPoint").getSimpleValue();
            var SupplierID = reference1.getValue("SupplierID").getSimpleValue();
            var SupplierName = reference1.getValue("SupplierName").getSimpleValue();
            var ItemShippedFacility = reference1.getValue("ItemShippedFacility").getSimpleValue();
            var ItemManufacturingPoint = reference1.getValue("ItemManufacturingPoint").getSimpleValue();
            var supplier = step.getEntityHome().getEntityByID(SupplierID);
            var facilityID = reference1.getTarget().getID();
            var facilityName = reference1.getTarget().getName();
            logger.info(facilityID + "-Facilities Supplier Metadata-" + facilityName);

            if (supplier != null) {
                try {
                    suppreff = supplierIDRef.createReference(supplier, itemSupplierRefType);
                    suppreff.getValue("ItemFacilityID").addValue(facilityID);
                    suppreff.getValue("ItemFacilityName").addValue(facilityName);
                    logger.info("Referenced SUPP-" + suppreff);
                } catch (e) {
                    logger.info("Before Exception");
                    if (suppreff != "" || suppreff != null) {
                        logger.info("In  Exception" + suppreff);
                        suppreff.getValue("ItemFacilityID").addValue(facilityID);
                        suppreff.getValue("ItemFacilityName").addValue(facilityName);
                    }
                    logger.info("Exception while adding Supplier Reference to McDonaldItem." + e);
                    throw e;
                }
            }
            //Quality Change - start
            var references = supplierIDRef.getReferences().asSet().iterator();
            supplierIDRef.getValue("TradeItemStatus").setSimpleValue(node.getValue("TradeItemStatus").getSimpleValue()); //1102
            var itemFacilityRefType = node.getValue("REF_ItemToFacility").getSimpleValue() + "";

            while (references.hasNext()) {
                var reference = references.next();
                if (reference.getReferenceType() == itemFacilityRefType) {
                    if (reference.getTarget().getID() == facilityID) {
                        //Quality Change - end			
                        logger.info(facilityID + "-Facilty Meta Addition-" + reference.getTarget().getID());
                        var approvedStatus = node.getValue("TradeItemStatus").getSimpleValue();
                        var additionalPartyIdentification = node.getValue("AdditionalPartyIdentification").getSimpleValue();

                        if (null != Market_Status) {
                            reference.getValue("FacilityApprovedCategory_Market_Status").setSimpleValue(Market_Status);
                        }
                        if (null != FacilityType) {
                            reference.getValue("FacilityType").setSimpleValue(FacilityType);
                        }
                        if (null != IsShipPoint) {
                            reference.getValue("IsShipPoint").setSimpleValue(IsShipPoint);
                        }

                        if (null != additionalPartyIdentification) {
                            reference.getValue("AdditionalPartyIdentification").setSimpleValue(additionalPartyIdentification);
                        }
                        if (null != SupplierID) {
                            reference.getValue("SupplierID").setSimpleValue(SupplierID);
                        }
                        if (null != SupplierName) {
                            reference.getValue("SupplierName").setSimpleValue(SupplierName);
                        }
                        if (null != ItemShippedFacility) {
                            reference.getValue("ItemShippedFacility").setSimpleValue(ItemShippedFacility);
                        }
                        if (null != SupplierName) {
                            reference.getValue("ItemManufacturingPoint").setSimpleValue(ItemManufacturingPoint);
                        }
                    }
                } //if
                logger.info(FacilityType + "CHeck-" + Market_Status);
            }
        }
    }
}

//This function is used to generate WRIN# which is a combination WRINPreffix and WRINSuffix.
function generateWRIN(AIRef, mcdItem) {
    var wrinPrefixMcdProd = AIRef.getValue("WRINPrefix").getSimpleValue();
    var AIWRINPrefixes = new java.util.ArrayList();

    var lastUsedPrefix = 00000;
    var maxWRINPrefix = step.getProductHome().getProductByID("McDonaldRawItem").getValue("MaxWrinNumberPrefix").getSimpleValue();

    var maxSuffix = 0;
    var formattedWRINSuffix;

    //checking whether the selected AI has any WRINPreffix or not.
    if (wrinPrefixMcdProd != null) {
        wrinPrefixMcdProd = appendZeros(wrinPrefixMcdProd + "", 5);
        lastUsedPrefix = wrinPrefixMcdProd;
        logger.info("-_-_-_-_-_-_-" + productGroup + "-_-_-_-=-_-" + Gender);

        if (productGroup == "Promotions" && Gender != null && Gender != "Unisex") {
            maxSuffix = generateMaxWrinSuffixForPromotion(lastUsedPrefix, mcdItem);
        } else if (productGroup == "Promotions" && Gender != null && Gender == "Unisex") {
            maxSuffix = generateMaxWrinSuffixForPromotion(lastUsedPrefix, mcdItem);
        } else {
            maxSuffix = generateMaxWrinSuffix(lastUsedPrefix, mcdItem);
        }
        logger.info("-Sending maxSuffix-" + maxSuffix);
        formattedWRINSuffix = appendZeros(maxSuffix + "", 3);
    } else {
        logger.info("-Insiode else-_-_-_-_-_-> ");
        lastUsedPrefix = step.getProductHome().getProductByID("McDonaldRawItem").getValue("MaxWrinNumberPrefix").getSimpleValue();
        lastUsedPrefix++;
        lastUsedPrefix = appendZeros(lastUsedPrefix + "", 5);
        step.getProductHome().getProductByID("McDonaldRawItem").getValue("MaxWrinNumberPrefix").setSimpleValue(lastUsedPrefix);

        if (productGroup == "Promotions" && Gender != null && Gender != "Unisex") {
            if (Gender == "Boy") {
                formattedWRINSuffix = "001";
            } else if (Gender == "Girl") {
                formattedWRINSuffix = "000";
            }
        } else {
            formattedWRINSuffix = "000";
        }
        AIRef.getValue("WRINPrefix").setSimpleValue(lastUsedPrefix);
    }


    //WRINSuffix should be less or equal to 999 if not we have to create a new Predix and take suffix value as '001'.
    if (formattedWRINSuffix > 999) {
        // **************** Coding for WRIN Suffix Gaps Started ********************

        if (MissingSuffixesForPrefix != null) {
            var MissingSuffixesForPrefixSplit = MissingSuffixesForPrefix.split(",");
            logger.info(MissingSuffixesForPrefixSplit.length + "-_-abbccc-_-");
            for (var i = 0; i < MissingSuffixesForPrefixSplit.length; i++) {
                var fetchSuffix = MissingSuffixesForPrefixSplit[i];
                //logger.info("-_-1-_-" + fetchSuffix);
                if ((matchFound1 == 0) && (formattedPrefixSuffix == 0)) {
                    var fetchPrefixSuffix = fetchSuffix;
                    logger.info("-_-fetchPrefixSuffix-_-" + fetchPrefixSuffix);
                    //we have to validate Whether Suffix is Part available
                    if (productGroup != "Promotions") {
                        matchFound1 = checkPrefSufFoundForNonPromotions(wrinPrefixMcdProd, fetchPrefixSuffix);
                        logger.info(fetchPrefixSuffix + "-matchFound1-" + matchFound1);
                        if (matchFound1 != 0) {
                            logger.info("====fetchPrefixSuffix==1=" + fetchPrefixSuffix);
                            formattedPrefixSuffix = fetchPrefixSuffix;
                        }
                        //if it is 1,means that is nt part of Migration search tree.
                    } else {
                        matchFound1 = checkPrefSufFoundForPromotions(wrinPrefixMcdProd, fetchPrefixSuffix);
                        if (matchFound1 != 0) {
                            logger.info("====fetchPrefixSuffix==1=" + fetchPrefixSuffix);
                            formattedPrefixSuffix = fetchPrefixSuffix;
                        }
                    }
                    logger.info("-_-matchFound1-_-" + matchFound1 + "-formattedPrefixSuffix-" + formattedPrefixSuffix);
                }
            }
        }
        logger.info("=====formattedPrefixSuffix===" + formattedPrefixSuffix);
        if (formattedPrefixSuffix == 0) {
            //throw "Max Range of the suffix reached for the given prefix node.Please create a new Prefix and tag the Item to the New Prefix";
            var message = new errorMessage(); //MDSIM-5459
            message.msg = errorLib.getErrorMessage(node, step, logger, "Maximum range of the suffix is reached for the given prefix node. Please create a new Prefix and tag the Item to the New Prefix.");
            throw message;
        } else {
            mcdItem.getValue("WRINPrefix").setSimpleValue(lastUsedPrefix);
            mcdItem.getValue("WRINSuffix").setSimpleValue(formattedPrefixSuffix);
            mcdItem.getValue("WRINNUMBER").setSimpleValue(lastUsedPrefix + formattedPrefixSuffix);

            node.getValue("WRINPrefix").setSimpleValue(lastUsedPrefix);
            node.getValue("WRINSuffix").setSimpleValue(formattedPrefixSuffix);
            node.getValue("WRINNUMBER").setSimpleValue(lastUsedPrefix + formattedPrefixSuffix);

            logger.info("-mcdItem11-_- -" + mcdItem);
            logger.info("-_-11-_- -" + mcdItem.getValue("WRINPrefix").getSimpleValue());
            logger.info("-_-11-_- -" + mcdItem.getValue("WRINNUMBER").getSimpleValue());
        }
        // **************** Coding for WRIN Suffix Gaps Ended ********************
    } else {
        lastUsedPrefix = appendZeros(lastUsedPrefix + "", 5);
        mcdItem.getValue("WRINPrefix").setSimpleValue(lastUsedPrefix);
        mcdItem.getValue("WRINSuffix").setSimpleValue(formattedWRINSuffix);
        mcdItem.getValue("WRINNUMBER").setSimpleValue(lastUsedPrefix + formattedWRINSuffix);

        node.getValue("WRINPrefix").setSimpleValue(lastUsedPrefix);
        node.getValue("WRINSuffix").setSimpleValue(formattedWRINSuffix);
        node.getValue("WRINNUMBER").setSimpleValue(lastUsedPrefix + formattedWRINSuffix);

        logger.info("-mcdItem11-_- -" + mcdItem);
        logger.info("-_-11-_- -" + mcdItem.getValue("WRINPrefix").getSimpleValue());
        logger.info("-_-11-_- -" + mcdItem.getValue("WRINNUMBER").getSimpleValue());
        logger.info("-_-11-_- -" + mcdItem.getValue("WRINSuffix").getSimpleValue());
        logger.info(lastUsedPrefix + "lastUsedPrefix .-_-" + mcdItem.getValue("WRINNUMBER").getSimpleValue());
    }

}

// This function is used to generate the WRINSuffix value based on the WRINPreffix value
function generateMaxWrinSuffix(WRINPrefixVal, mcdItem) {
    //Step 1::::: Check Whether WRINPrefixVal is already congigured in 
    var prefixFound = 0;
    var maxSuffix = -1;
    logger.info("-_-_-_-Inside generateMaxWrinSuffix-_-");
    var prefixAtParentLevel;
    // ***** Concurrency Started
    if (IsPrefixMigrated == "Yes") {
        prefixFound = 1;
    } else {
        prefixFound = 0;
    }

    // ***** Concurrency Ended

    /* Concurrency remove
    var PrefixesMigrated = step.getProductHome().getProductByID("McDonaldRawItem").getValue("PrefixesMigrated").getSimpleValue();
    if (null != PrefixesMigrated)
    {
    	logger.info("Inside Prefix Migrated");
    	var PrefixesMigratedSplit = PrefixesMigrated.split('<multisep/>');
    	logger.info(PrefixesMigratedSplit.length + "-_-abbccc-_-");
    	for (var i = 0; i < PrefixesMigratedSplit.length; i++)
    	{
    		var fetchPrefix = PrefixesMigratedSplit[i];
    		if (WRINPrefixVal == fetchPrefix)
    		{
    			prefixFound = 1;
    		}
    	}
    }
    */

    if (prefixFound == 0) {
        logger.info("Inside Prefix Found==0");
        var ValuesInLov = step.getListOfValuesHome().getListOfValuesByID("WRINPrefixSuffixMax").getListOfValuesValueByID(WRINPrefixVal);
        var prefixSuffixMax;
        var prefixSuffixSplit;
        var prefixStr;


        if (ValuesInLov != null) {
            prefixSuffixMax = ValuesInLov.getValue();
            prefixSuffixSplit = prefixSuffixMax.split("-");
            prefixStr = prefixSuffixSplit[0];
            maxSuffix = prefixSuffixSplit[1];
        }
        logger.info("-_-maxSuffix-_-_-_-" + maxSuffix);
        /* Concurrency remove
        var PrefixesMigrated = step.getProductHome().getProductByID("McDonaldRawItem").getValue("PrefixesMigrated").getSimpleValue();
        step.getProductHome().getProductByID("McDonaldRawItem").getValue("PrefixesMigrated").addValue(WRINPrefixVal); 
        */

        mcdProdReference.getValue("IsPrefixMigrated").setSimpleValue("Yes");
    }

    if (prefixFound == 1) {
        /*Added By Debajit on May 3, 2018*/

        logger.info("Inside Prefix Found==1");
        var ValuesInLov = step.getListOfValuesHome().getListOfValuesByID("WRINPrefixSuffixMax").getListOfValuesValueByID(WRINPrefixVal);
        var prefixSuffixMax;
        var prefixSuffixSplit;
        var prefixStr;
        var maxSuffix;

        /*Added By Debajit on May 3, 2018**/

        if (ValuesInLov != null) {
            prefixSuffixMax = ValuesInLov.getValue();
            prefixSuffixSplit = prefixSuffixMax.split("-");
            prefixStr = prefixSuffixSplit[0];
            maxSuffix = prefixSuffixSplit[1];
        }
        logger.info("Inside Prefix Found==1");
        WRINPrefixVal = appendZeros(WRINPrefixVal + "", 5);
        /*

        var WRINNumResults = new java.util.ArrayList(1000);
        logger.info("-before addin-"+WRINNumResults.size());
        var calWRINPrefixAtrribute = step.getAttributeHome().getAttributeByID("WRINPrefix");
        var searchQuery = new com.stibo.core.domain.singleattributequery.SingleAttributeQueryHome.SingleAttributeQuerySpecification(com.stibo.core.domain.Product, calWRINPrefixAtrribute, WRINPrefixVal);
        WRINNumResults = step.getHome(com.stibo.core.domain.singleattributequery.SingleAttributeQueryHome).querySingleAttribute(searchQuery).asList(1000);
        logger.info("-searchResults MAX-_-_-" + WRINNumResults.size());*/

        //Added for Production Fix started 032320108, replacement of above limitation for INC9604119.
        var McDProdRef = step.getReferenceTypeHome().getReferenceTypeByID("PackCaseToAI");
        var McDProdRefObj = node.getReferences(McDProdRef);
        var mcdProduct = null;

        for (var p = 0; p < McDProdRefObj.size(); p++) {
            mcdProduct = McDProdRefObj.get(p).getTarget();
        }

        var childrens = mcdProduct.getChildren();
        var suffixSet = new java.util.TreeSet();
        prefixAtParentLevel = mcdProduct.getValue("WRINPrefix").getSimpleValue();
        logger.info("-childrens-" + childrens.size());
        for (var v = 0; v < childrens.size(); v++) {
            var Child = childrens.get(v);
            suffixSet.add(Child);
        }

        var WRINNumResults = new java.util.ArrayList(suffixSet);
        logger.info("-After addin-" + WRINNumResults.size());
        //Added for Prodcution Fix Ended.

        if (WRINNumResults != null && WRINNumResults.size() > 0) {
            //logger.info("-In IF Loop>0-_-_-"+WRINNumResults.size());
            for (var v_ctr = 0; v_ctr < WRINNumResults.size(); v_ctr++) {
                var v_mcDitem = WRINNumResults.get(v_ctr);
                var v_mcDitem_val = v_mcDitem.getID();
                var packsubstr = v_mcDitem_val.substring(0, 2);
                if (packsubstr == "SI" && v_mcDitem_val != mcdItem.getID()) {
                    //logger.info(maxSuffix+"- maxSuffix v_mcDitem_val-_-" + v_mcDitem_val);
                    var wrinSuffix = v_mcDitem.getValue("WRINSuffix").getSimpleValue();
                    //logger.info ("-_-Debug wrinsuffix-_-_-_-_-" +wrinSuffix);
                    var currentPrefix = v_mcDitem.getValue("WRINPrefix").getSimpleValue();

                    if (prefixAtParentLevel == null)
                        prefixAtParentLevel = currentPrefix;

                    //In case of Re-Alignmnet, for New WRIN Generation 
                    //Only Parent Prefix Needs to be considered
                    //Added By Jawaid on 	
                    if (currentPrefix == prefixAtParentLevel) {
                        if (maxSuffix < wrinSuffix) {
                            //logger.info("-maxSuffix SURESH-_-_-" + maxSuffix);
                            maxSuffix = wrinSuffix;
                            //logger.info ("-_-Debug 1-_-_-_-_-" +maxSuffix);
                        }

                    }
                }
            }
        }
    }
    maxSuffix++;

    logger.info("last Max Suffix is " + maxSuffix);

    maxSuffix = getTheUnusedSuffix(WRINPrefixVal, maxSuffix, mcdItem, null);

    return maxSuffix;
}


//This 

// This function is used to prepend the zeros for the given string.
function appendZeros(Str, prefixLength) {
    logger.info("-str-" + Str + "-prefixLength-" + prefixLength);
    var appendZerosLength = prefixLength - Str.length;
    var formattedPrefix = "";
    for (var v_ctr = 0; v_ctr < appendZerosLength; v_ctr++) {
        formattedPrefix = '0' + formattedPrefix;
    }
    formattedPrefix = formattedPrefix + Str;
    logger.info("-appendZeros SENT-_-" + formattedPrefix);
    return formattedPrefix;
}

var references = node.getProductReferences().asSet().iterator();
var formattedEmail = "";
var Toemail = node.getValue("ContactEmail").getSimpleValue() + ";";
var ReqNum = node.getValue("RequestNumber").getSimpleValue();
var ApprovedByExtCatManagerID = node.getValue("ApprovedByExtCatManager").getSimpleValue();
var ApprovedByDataTeamUserID = node.getValue("ApprovedByDataTeamUser").getSimpleValue();
var ApprovedByGlobalUserID = node.getValue("ApprovedByGlobalUser").getSimpleValue();

var EnvType = node.getValue("EnvType").getSimpleValue();
var packId = node.getID();
var wrinNUMBER = node.getValue("WRINNUMBER").getSimpleValue();
logger.info(EnvType + "wrin#-_-" + wrinNUMBER);
var DataTeamUserIDVal;
var GlobalUserIDVal;
var ExtCatManagerIDVal;

if (null != ApprovedByDataTeamUserID) {
    DataTeamUserIDVal = step.getUserHome().getUserById(ApprovedByDataTeamUserID);
}
if (null != ApprovedByGlobalUserID) {
    GlobalUserIDVal = step.getUserHome().getUserById(ApprovedByGlobalUserID);
}

if (null != ApprovedByExtCatManagerID) {
    ExtCatManagerIDVal = step.getUserHome().getUserById(ApprovedByExtCatManagerID);
}

if (null != DataTeamUserIDVal) {
    if (null != DataTeamUserIDVal.getEMail())
        formattedEmail = formattedEmail + DataTeamUserIDVal.getEMail() + ";";
}
if (null != ExtCatManagerIDVal) {
    if (null != ExtCatManagerIDVal.getEMail())
        formattedEmail = formattedEmail + ExtCatManagerIDVal.getEMail() + ";";
}
if (null != GlobalUserIDVal) {
    if (null != GlobalUserIDVal.getEMail())
        formattedEmail = formattedEmail + GlobalUserIDVal.getEMail() + ";";
}


//Creation of McDonlad Item.
function generateMcDItem(AIRef) {
    McDitem = AIRef.createProduct(null, "McDonaldItem");
    logger.info("McDitem Created -_-_-_-_-_-_-_-_-_-> " + McDitem);
    var PackName = node.getValue("TradeItemName").getSimpleValue();
    logger.info(PackName + "-_-_-_-_-_-_-_-Pack  -_-_-_-_-_-_-_-_-_-> " + node.getName());
    //McDitem.setName(PackName.trim());
    logger.info("McDitem Name -_-_-_-_-_-_-_-_-_-> " + McDitem.getName());
    var McDonaldItemVal = McDitem.getID();

    if (objTypeID == "McDTargetMarketTempObject") {
        var mcdIDRef = getMcDItem();
        mcdIDRef.createReference(McDitem, "PackToMcDonaldItem");
    } else {
        try {
            node.createReference(McDitem, "PackToMcDonaldItem");
        } catch (e) {
            logger.info("Exception RawItemToAI is:-_-_-_-_-_->" + e);
            throw e;
        }
    }
    logger.info(McDitem.getValue("WRINNUMBER").getSimpleValue() + "-_-Before Copy-" + node.getValue("WRINNUMBER").getSimpleValue());
    copyAttributesLib.copyAttributes(node, McDonaldItemVal, step);
    logger.info(McDitem.getValue("WRINNUMBER").getSimpleValue() + "-_-After Copy-" + node.getValue("WRINNUMBER").getSimpleValue());
    McDitem.getValue("WRINPrefixAttributesforFoodLiquid").setSimpleValue(node.getValue("WRINPrefixAttributesforFoodLiquid").getSimpleValue());
    McDitem.getValue("WRINPrefixAttributesforFoodNonLiquid").setSimpleValue(node.getValue("WRINPrefixAttributesforFoodNonLiquid").getSimpleValue());
    McDitem.getValue("WRINPrefixAttributesforOpsSupply").setSimpleValue(node.getValue("WRINPrefixAttributesforOpsSupply").getSimpleValue());
    McDitem.getValue("WRINPrefixAttributesforPackaging").setSimpleValue(node.getValue("WRINPrefixAttributesforPackaging").getSimpleValue());
    McDitem.getValue("WRINPrefixAttributesforToys").setSimpleValue(node.getValue("WRINPrefixAttributesforToys").getSimpleValue());
    /*if(null!=node.getValue("ItemNote").getSimpleValue())
    {
    McDitem.getValue("ItemNote").addValue(node.getValue("ItemNote").getSimpleValue());
    }*/

    createfacilityReference(McDitem, node);
    //populateFacilityValues(McDonaldItemVal);
    updateMcDItemReferences();
    populateMrktReferences(McDitem, node, "ItemToMarketCategory");
    //populateMrktReferences(McDitem, node,"ItemToMarketExtension");
    populateMcDRef();

    var currentDate = new Date().toISOString().slice(0, 10);
    currentDate = currentDate + " 00:00:00";
    var user = step.getCurrentUser().getID();

    McDitem.getValue("CreatedBy").setSimpleValue(user);
    McDitem.getValue("CreatedOn").setSimpleValue(currentDate);
    populateItemToSupplier(McDitem);

    //McDitem Approve		


    //Calling CUOM Code for Calculating Imperial adn Metric Values(MDRI-1188).
    cuom.cuom(node, step, logger);
    //McDitem.approve(); 0413
}

function populateItemToSupplier(McDitem) {

    var PackCaseToSupplierArray;
    var PackCaseToSupplierRefObj;
    var itemTOSupplierRefObj
    var McDitem;
    logger.info("-_-_-populateItemToSupplier-_-_-");
    //Quality Change - start
    var itemSupplierRefType = McDitem.getValue("REF_ItemToSupplier").getSimpleValue() + "";
    var McDitemArray = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("PackToMcDonaldItem")).toArray();
    PackCaseToSupplierArray = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID(itemSupplierRefType)).toArray();
    //Quality Change - end
    var FacNamesSet = new java.util.TreeSet();
    var supplierID;
    var supplierName;

    if (McDitemArray.length > 0) {
        McDitem = McDitemArray[0].getTarget();
        logger.info("McDitem = " + McDitem + "-_-_-_-_-_-_-" + PackCaseToSupplierArray[0].getTarget());
        if (PackCaseToSupplierArray.length > 0) {
            try {
                PackCaseToSupplierRefObj = McDitem.createReference(PackCaseToSupplierArray[0].getTarget(), itemSupplierRefType);
                //MDSIM-3397 (Defect - 3839)
                PackCaseToSupplierRefObj.getValue("SIM_Identifier").setSimpleValue(numGenLib.getCustomID(PackCaseToSupplierArray[0].getTarget(), step, logger));

            } catch (e) {
                throw e;
            }

            //refObj.getValue('Facility_MFG_SSP').setSimpleValue(PackCaseToSupplierArray[0].getValue('Facility_MFG_SSP').getSimpleValue());
            var Facility_MFG_SSP = PackCaseToSupplierArray[0].getValue('Facility_MFG_SSP').getSimpleValue();
            logger.info("-_-_-Facility_MFG_SSP-_-_-_-" + Facility_MFG_SSP);
            var facilityName = PackCaseToSupplierArray[0].getValue('ItemFacilityName').getSimpleValue();
            logger.info("facilityName ==========" + facilityName);
            var Facility_MFG_SSP_Split = Facility_MFG_SSP.split('<multisep/>');
            for (var k = 0; k < Facility_MFG_SSP_Split.length; k++) {

                var facid = Facility_MFG_SSP_Split[k];
                logger.info("-_-_-facid-_-_-" + facid.contains("\\/"));

                if (facid.contains("\\/")) {
                    var facid_Split = facid.split('<multisep/>');
                    for (var k1 = 0; k1 < facid_Split.length; k1++) {
                        logger.info(facid_Split[k1] + "-_-_-_-indise if-_-_-_-" + facid);
                        FacNamesSet.add(facid_Split[k1]);
                    }
                } else {
                    logger.info("-_-_-_-indise lse-_-_-_-" + facid);
                    FacNamesSet.add(facid);
                }

            }
            //Quality Change - start
            var itemSupplierRefType = node.getValue("REF_ItemToSupplier").getSimpleValue() + "";
            var itemTOSupplierRefObjArray = McDitem.getReferences(step.getReferenceTypeHome().getReferenceTypeByID(itemSupplierRefType)).toArray();
            //Quality Change - end
            for (var counter1 = 0; counter1 < PackCaseToSupplierArray.length; counter1++) {
                var pkItemtoSupplier = PackCaseToSupplierArray[counter1].getTarget().getID();
                logger.info("-_-_-pkItemtoSupplier-_-_-" + pkItemtoSupplier);
                if (itemTOSupplierRefObjArray.length > 0) {
                    logger.info("-_-_-itemTOSupplierRefObjArray-_-_-" + itemTOSupplierRefObjArray.length);

                    for (var counter = 0; counter < itemTOSupplierRefObjArray.length; counter++) {
                        var itemTOSupplierRefObjArray1 = itemTOSupplierRefObjArray[counter].getTarget().getID();
                        var itemTOSupplierRefObjref = itemTOSupplierRefObjArray[counter].getTarget();

                        if (pkItemtoSupplier == itemTOSupplierRefObjArray1) {
                            logger.info(itemTOSupplierRefObjArray1 + "-_-_-_-McDitem1-_-suresh-_-" + itemTOSupplierRefObjref);
                            //start

                            var Facility_MFG_SSP1 = itemTOSupplierRefObjArray[counter].getValue('Facility_MFG_SSP').getSimpleValue();
                            logger.info("-_-y-_-" + Facility_MFG_SSP1);
                            if (null != Facility_MFG_SSP1) {
                                logger.info("-_-y1-_-");
                                var Facility_MFG_SSP_Split1 = Facility_MFG_SSP1.split('<multisep/>');
                                for (var k3 = 0; k3 < Facility_MFG_SSP_Split1.length; k3++) {

                                    var facid1 = Facility_MFG_SSP_Split1[k3];
                                    logger.info("-_-_-facid1-_-_-" + facid1.contains("\\/"));

                                    if (facid1.contains("\\/")) {
                                        var facid_Split1 = facid1.split('<multisep/>');
                                        for (var k2 = 0; k2 < facid_Split1.length; k2++) {
                                            logger.info(facid_Split1[k2] + "-_-_-_-indise if-1-_-_-" + facid1);
                                            FacNamesSet.add(facid_Split1[k2]);
                                        }
                                    } else {
                                        logger.info("-_-_-_-indise lse-_-_-1-" + facid1);
                                        FacNamesSet.add(facid1);
                                    }

                                }
                            }
                            //ended


                            //READING FROM TE MCD IS COMPLETED
                            logger.info("-_-y2-_-" + FacNamesSet.size());
                            var FacNamesList = new java.util.ArrayList(FacNamesSet);
                            logger.info(itemTOSupplierRefObjArray1 + "-_-_-FacNamesList-_-_-_-" + FacNamesList.size());
                            itemTOSupplierRefObjArray[counter].getValue('Facility_MFG_SSP').setSimpleValue("");
                            for (var c = 0; c < FacNamesList.size(); c++) {
                                logger.info("-_-_-_-Adding -_-_-_-" + FacNamesList.get(c));
                                itemTOSupplierRefObjArray[counter].getValue('Facility_MFG_SSP').addValue(FacNamesList.get(c));
                            }
                            //itemTOSupplierRefObjArray[counter].getValue("ItemFacilityName").addValue(facilityName);
                        }
                    }
                }
            }

            logger.info("-_-_-final while-_-_-_-");


        }
    }
}

function getMcDItem() {
    var facilityrefID = null;

    var nodereferences = node.getReferences().asSet().iterator();
    while (nodereferences.hasNext()) {
        var reference1 = nodereferences.next();
        if (reference1.getReferenceType() == "TempObjToItem") {
            var facilityref = reference1.getTarget().getID();
            facilityrefID = step.getProductHome().getProductByID(facilityref);
        }
    }
    return facilityrefID
}

function updateMcDItemReferences() {

    logger.info("In 1st Function.,.");
    var marketExtensionRef = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketCategory");
    var marketExtensionRefObj = node.getReferences(marketExtensionRef);

    for (var i = 0; i < marketExtensionRefObj.size(); i++) {
        var market = marketExtensionRefObj.get(i).getTarget().getID();
        var marketName = marketExtensionRefObj.get(i).getTarget().getName();
        var marketID = step.getEntityHome().getEntityByID(market);
        var status = marketExtensionRefObj.get(i).getValue("SupplierItemMktApprovalStatus").getSimpleValue();
        var ItemLocalNumber = marketExtensionRefObj.get(i).getValue("ItemLocalNumber").getSimpleValue();
        logger.info(market + "-Before updateMcDItemReferences-" + status);
        setMcdReferences(marketName, marketID, status, ItemLocalNumber);
        logger.info(market + "-After updateMcDItemReferences-" + status);
    }
}

function getpack() {
    var pack = "";
    if (objTypeID == "McDTargetMarketTempObject") {
        var packnRef = step.getReferenceTypeHome().getReferenceTypeByID("TempObjToItem");
        var packRefObj = node.getReferences(packnRef);

        for (var i = 0; i < packRefObj.size(); i++) {
            var packID = packRefObj.get(i).getTarget().getID();
            pack = step.getProductHome().getProductByID(packID);
            logger.info("packID-" + packID);
        }
    } else {
        pack = node;
        logger.info("IN JEFFAA:" + pack);
    }
    return pack;
}

function setMcdReferences(marketName, marketID, status, ItemLocalNumber) {

    var pack = getpack();

    if (pack != null) {
        //pack.getValue("TradeItemStatus").setSimpleValue("Active");
        var itemRef = step.getReferenceTypeHome().getReferenceTypeByID("PackToMcDonaldItem");
        var itemRefObj = pack.getReferences(itemRef);
        logger.info("SIZE:" + itemRefObj);
        for (var i = 0; i < itemRefObj.size(); i++) {
            var itemID = itemRefObj.get(i).getTarget().getID();
            var item = step.getProductHome().getProductByID(itemID);
            logger.info(marketID + "111 IS:" + itemID);
            logger.info(item + "222 IS:" + status);
            if (item != null && marketID !== null && (status != "Inactive")) {
                try {
                    var refCreated = item.createReference(marketID, "ItemToMarketCategory");
                    logger.info(refCreated + "-333 IS:-" + marketID);
                    refCreated.getValue("SupplierItemMktApprovalStatus").setSimpleValue(status);
                    if (ItemLocalNumber != "" && ItemLocalNumber != null) {

                        refCreated.getValue("ItemLocalNumber").setSimpleValue(ItemLocalNumber);

                    }
                    var parsedDate = getCurrentDate.getCurrentDateInHHMMSS();
                    refCreated.getValue("DataTeamOnEntryCreatedOn").setSimpleValue(parsedDate);
                    refCreated.getValue("DataTeamOnExitCreatedOn").setSimpleValue(parsedDate);
                } catch (e) {
                    logger.info("refCreatedException" + e);
                    throw e;
                }
            }
        }
    }
}

function delRejectReference(tempobj) {

    var objType = node.getObjectType().getID();
    var ReferenceType = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketCategory");
    if (ReferenceType != null) {
        var ReferenceTypes = node.getReferences(ReferenceType);
        if (ReferenceTypes.size() > 0) {
            for (var i = 0; i < ReferenceTypes.size(); i++) {
                var reference1 = ReferenceTypes.get(i);
                var facility = reference1.getTarget().getID();
                var references = tempobj.getReferences().asSet().iterator();
                while (references.hasNext()) {
                    var reference = references.next()
                    if ((reference.getReferenceType() == "ItemToMarketExtension")) {
                        var marketid = reference.getTarget().getID();
                        var marketName = reference.getTarget().getName();
                        var status = reference.getValue("MarketExtensionStatus").getSimpleValue();

                        if (objType == "McDonaldItem") {
                            if ((status == "Reject" || status == "Pending Facility Approval") && (facility == marketid)) {
                                if (status == "Reject")
                                    reference1.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Rejected");
                                else if (status == "Pending Facility Approval")
                                    reference1.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Pending Facility Approval");
                                reference.delete();
                                logger.info(facility + "IF DELETED-_-" + status);
                                email.generateEmailForRejection(node, step, mailer, logger, formattedEmail, "Global Category Manager", marketName);
                            } else if ((status == "Approve") && (facility == marketid)) {
                                reference1.getValue("SupplierItemMktApprovalStatus").setSimpleValue("Active");
                            }
                        }
                    }
                }
            }
        }
    }
}


function marketFacilityCheck(Facility) {
    var market = "";
    var markRef = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketCategory");
    var markRefObj = node.getReferences(markRef);

    for (var i = 0; i < markRefObj.size(); i++) {
        market = markRefObj.get(i).getTarget().getID();
    }

    var matchFound = 0;
    var userCategory = node.getValue("ProductCategory").getSimpleValue();
    //Quality Change - start
    var facilityCategoryRefType = "SIM_Facility_To_Category";
    var facCatRef = step.getReferenceTypeHome().getReferenceTypeByID(facilityCategoryRefType);
    //Quality Change - end
    var facCatRefObj = Facility.getReferences(facCatRef);
    for (var i = 0; i < facCatRefObj.size(); i++) {
        var catID = facCatRefObj.get(i).getTarget().getID();
        var category = facCatRefObj.get(i).getValue("SIM_Category_Name").getSimpleValue();
        var targetMarket = facCatRefObj.get(i).getValue("SIM_Market_Name").getSimpleValue();
        var facilityRefApprovalStatus = facCatRefObj.get(i).getValue("SIM_Approval_Status").getSimpleValue();

        if (userCategory == category && ((facilityRefApprovalStatus == "Approved") || (facilityRefApprovalStatus == "Probation") || (facilityRefApprovalStatus == "Onboarding")) && targetMarket == market) {
            //logger.info("-_-matchFound Against With facility & Market -_-");						
            matchFound = 1;
        }
    }
    logger.info(market + "-FACandMARKET-" + matchFound);
    return matchFound;
}




function deletepackreferences() {
    var pack = "";
    var objectType = node.getObjectType().getID();
    logger.info("objectType-" + objectType);
    if (objectType == "McDTargetMarketTempObject") {
        var references = node.getProductReferences().asSet().iterator();
        while (references.hasNext()) {
            var reference = references.next();
            if (reference.getReferenceType() == "TempObjToItem") {
                logger.info("-_-_-Inside TempObjToItem-_-_-_-_-_-_-_-");
                var mcdNodeID = reference.getTarget().getID();
                var mcdNode = step.getProductHome().getProductByID(mcdNodeID);
                pack = mcdNode;
            }
        }
    } else {
        pack = node;
    }
    logger.info("pack-" + pack);

    var tempRef = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketExtension");
    var tempRefObj = pack.getReferences(tempRef);
    logger.info(pack + "-No of Markets-" + tempRefObj.size());
    for (var counter = 0; counter < tempRefObj.size(); counter++) {
        var refType = tempRefObj.get(counter);
        refType.delete();
    }

    //Quality Change - start
    var itemFacilityExtRefType = node.getValue("REF_ItemToFacilityExtension").getSimpleValue() + "";
    var itemFacilityRefType = node.getValue("REF_ItemToFacility").getSimpleValue() + "";
    var facilityRef = step.getReferenceTypeHome().getReferenceTypeByID(itemFacilityExtRefType);
    //Quality Change - end
    var facilityRefObj = pack.getReferences(facilityRef);
    logger.info("No of Facilities:" + facilityRefObj.size());
    for (var k = 0; k < facilityRefObj.size(); k++) {
        var facility = facilityRefObj.get(k).getTarget().getID();
        reference1 = facilityRefObj.get(k);
        var facilityobj = step.getEntityHome().getEntityByID(facility);
        var Market_Status = reference1.getValue("FacilityApprovedCategory_Market_Status").getSimpleValue();
        var FacilityType = reference1.getValue("FacilityType").getSimpleValue();
        var IsShipPoint = reference1.getValue("IsShipPoint").getSimpleValue();
        var SupplierID = reference1.getValue("SupplierID").getSimpleValue();
        var SupplierName = reference1.getValue("SupplierName").getSimpleValue();
        var ItemShippedFacility = reference1.getValue("ItemShippedFacility").getSimpleValue();
        var ItemManufacturingPoint = reference1.getValue("ItemManufacturingPoint").getSimpleValue();
        try {
            var referenced = pack.createReference(facilityobj, itemFacilityRefType);
            if (null != Market_Status) {
                referenced.getValue("FacilityApprovedCategory_Market_Status").setSimpleValue(Market_Status);
            }
            if (null != FacilityType) {
                referenced.getValue("FacilityType").setSimpleValue(FacilityType);
            }
            if (null != IsShipPoint) {
                referenced.getValue("IsShipPoint").setSimpleValue(IsShipPoint);
            }
            if (null != SupplierID) {
                referenced.getValue("SupplierID").setSimpleValue(SupplierID);
            }
            if (null != SupplierName) {
                referenced.getValue("SupplierName").setSimpleValue(SupplierName);
            }
            if (null != ItemShippedFacility) {
                referenced.getValue("ItemShippedFacility").setSimpleValue(ItemShippedFacility);
            }
            if (null != ItemManufacturingPoint) {
                referenced.getValue("ItemManufacturingPoint").setSimpleValue(ItemManufacturingPoint);
            }
            facilityRefObj.get(k).delete();
        } catch (e) {
            logger.info("Exception while addig ItemToFacility reference for Pack/Case." + e);
            throw e;
        }
    }
}

function populateMrktReferences(McDitem, node, refType) {
    var ReferenceType = step.getReferenceTypeHome().getReferenceTypeByID(refType);
    if (ReferenceType != null) {
        var ReferenceTypes = node.getReferences(ReferenceType);
        if (ReferenceTypes.size() > 0) {
            for (var i = 0; i < ReferenceTypes.size(); i++) {
                var reference1 = ReferenceTypes.get(i);
                var targetMarketID = reference1.getTarget().getID();
                var targetMarketName = reference1.getTarget().getName();
                createfacilityReferenceLib.createfacilityReferenceformrkt(node, step, logger, McDitem, refType, targetMarketName);
            }
        }
    }
}


function populateMcDRef() {
    var McDIDRef;
    var references = node.getProductReferences().asSet().iterator();
    while (references.hasNext()) {
        var reference = references.next();
        if (reference.getReferenceType() == "PackToMcDonaldItem") {
            var McDID = reference.getTarget().getID();
            McDIDRef = step.getProductHome().getProductByID(McDID);
            logger.info("-_-_-McDIDRef-_-_-_-" + McDIDRef);
        }
    }
    var references = node.getReferencedByProducts().toArray();
    if (references.length > 0) {
        for (var i = 0; i < references.length; i++) {
            if ((references[i].getReferenceType() == "TempObjToItem")) {
                var tempObj = references[i].getSource().getID();
                var formattedTempObjectsRef = step.getProductHome().getProductByID(tempObj);
                formattedTempObjectsRef.createReference(McDIDRef, "TempObjectToMcD");
            }
        }
    }
}



function generateMaxWrinSuffixForPromotion(WRINPrefixVal, mcdItem) {
    logger.info("-In generateMaxWrinSuffixForPromotion-" + Gender);
    var suffixSet = new java.util.TreeSet();
    //Step 1::::: Check Whether WRINPrefixVal is already congigured in 
    var prefixFound = 0;
    var maxSuffix = 0;

    // ***** Concurrency Started
    if (IsPrefixMigrated == "Yes") {
        prefixFound = 1;
    } else {
        prefixFound = 0;
    }
    logger.info("-_-_-_-_-_-" + prefixFound);
    // ***** Concurrency Ended

    /* Concurrency remove
    var PrefixesMigrated = step.getProductHome().getProductByID("McDonaldRawItem").getValue("PrefixesMigrated").getSimpleValue();
    if (null != PrefixesMigrated)
    {
    		var PrefixesMigratedSplit = PrefixesMigrated.split('<multisep/>');
    		for (var i = 0; i < PrefixesMigratedSplit.length; i++)
    		{
    				var fetchPrefix = PrefixesMigratedSplit[i];
    				if (WRINPrefixVal == fetchPrefix)
    				{
    						prefixFound = 1;
    				}
    		}
    }
    logger.info("-_-_-_-_-_-"+prefixFound);*/

    if (prefixFound == 0) {
        var ValuesInLov = step.getListOfValuesHome().getListOfValuesByID("WRINPrefixSuffixMax").getListOfValuesValueByID(WRINPrefixVal);
        var prefixSuffixMax;
        var prefixSuffixSplit;
        var prefixStr;

        if (ValuesInLov != null) {
            logger.info("-_-_-ValuesInLov-_-_-" + ValuesInLov.getValue());
            prefixSuffixMax = ValuesInLov.getValue();
            prefixSuffixSplit = prefixSuffixMax.split("-");
            prefixStr = prefixSuffixSplit[0];
            maxSuffix = prefixSuffixSplit[1];
            logger.info("-_-_-maxSuffix-_-_-" + maxSuffix);

            if (Gender != "Unisex") {
                if (maxSuffix % 2 == 0) {
                    if (Gender == "Boy") {
                        suffixVal = Number(maxSuffix) + 1;
                    } else if (Gender == "Girl") {
                        suffixVal = Number(maxSuffix) + 2;
                    }
                } else {
                    if (Gender == "Girl") {
                        suffixVal = Number(maxSuffix) + 1;
                    } else if (Gender == "Boy") {
                        suffixVal = Number(maxSuffix) + 2;
                    }
                }
                logger.info("-_-_-suffixVal-_-_-" + suffixVal);
                logger.info("-_-_-Gender-_-_-" + Gender);
            } else {
                suffixVal = Number(maxSuffix) + 1;
            }
        } else {
            if (Gender == "Boy") {
                suffixVal = "001";
            } else {
                suffixVal = "000";
            }
        }

        /* Concurrency remove
        var PrefixesMigrated = step.getProductHome().getProductByID("McDonaldRawItem").getValue("PrefixesMigrated").getSimpleValue();
        step.getProductHome().getProductByID("McDonaldRawItem").getValue("PrefixesMigrated").addValue(WRINPrefixVal);*/

        mcdProdReference.getValue("IsPrefixMigrated").setSimpleValue("Yes");
    } else if (prefixFound == 1) {
        var ValuesInLov = step.getListOfValuesHome().getListOfValuesByID("WRINPrefixSuffixMax").getListOfValuesValueByID(WRINPrefixVal);
        logger.info("-ValuesInLov-_-_->>>" + ValuesInLov);
        var prefixSuffixMax;
        var prefixSuffixSplit;
        var prefixStr;
        var temp = 0;

        WRINPrefixVal = appendZeros(WRINPrefixVal + "", 5);

        /*  var WRINNumResults = new java.util.ArrayList();
        var calWRINPrefixAtrribute = step.getAttributeHome().getAttributeByID("WRINPrefix");
        var searchQuery = new com.stibo.core.domain.singleattributequery.SingleAttributeQueryHome.SingleAttributeQuerySpecification(com.stibo.core.domain.Product, calWRINPrefixAtrribute, WRINPrefixVal);
        WRINNumResults = step.getHome(com.stibo.core.domain.singleattributequery.SingleAttributeQueryHome).querySingleAttribute(searchQuery).asList(1000);
        logger.info("-searchResults MAX-_-_->>>" + WRINNumResults.size()); */

        //Added for Production Fix started 032320108, replacement of above limitation for INC9604119.
        var McDProdRef = step.getReferenceTypeHome().getReferenceTypeByID("PackCaseToAI");
        var McDProdRefObj = node.getReferences(McDProdRef);
        var mcdProduct = null;

        for (var p = 0; p < McDProdRefObj.size(); p++) {
            mcdProduct = McDProdRefObj.get(p).getTarget();
        }

        var childrens = mcdProduct.getChildren();
        var productSet = new java.util.TreeSet();

        logger.info("-childrens-" + childrens.size());
        for (var v = 0; v < childrens.size(); v++) {
            var Child = childrens.get(v);
            productSet.add(Child);
        }

        var WRINNumResults = new java.util.ArrayList(productSet);
        logger.info("-After addin-" + WRINNumResults.size());
        //Added for Prodcution Fix Ended.				


        if (WRINNumResults != null && WRINNumResults.size() > 0) {
            for (var v_ctr = 0; v_ctr < WRINNumResults.size(); v_ctr++) {
                var v_mcDitem = WRINNumResults.get(v_ctr);
                var v_mcDitem_val = v_mcDitem.getID();
                var packsubstr = v_mcDitem_val.substring(0, 2);
                if (packsubstr == "SI" && v_mcDitem_val != mcdItem.getID()) {
                    var wrinSuffix = v_mcDitem.getValue("WRINSuffix").getSimpleValue();
                    //logger.info("-wrinSuffix-_-_->>>" + wrinSuffix);
                    if (wrinSuffix != null) {
                        suffixSet.add(wrinSuffix);
                    }
                }
            }
        }

        //var Gender = node.getValue("Gender").getSimpleValue();					
        var suffixVal = 0;
        var suffixValIncrement = "";
        var suffixList = new java.util.ArrayList();

        if (ValuesInLov != null) {
            prefixSuffixMax = ValuesInLov.getValue();
            prefixSuffixSplit = prefixSuffixMax.split("-");
            prefixStr = prefixSuffixSplit[0];
            maxSuffix = prefixSuffixSplit[1];
            logger.info("-In IF ValuesInLov-" + suffixValIncrement);
            suffixValIncrement = maxSuffix;
            logger.info("-In IF ValuesInLov2-" + suffixValIncrement);
            suffixSet.add(maxSuffix);
            suffixList = new java.util.ArrayList(suffixSet);

            for (var i = 0; i <= suffixList.size(); i++ && temp == 0) {
                //logger.info(suffixValIncrement+"-_-_-_-_-suffixList temp1 -_-_-_-_-_-_-_-_-"+temp);
                if (Gender == "Boy" && temp == 0) {
                    if (suffixValIncrement % 2 == 0) {
                        suffixValIncrement = Number(suffixValIncrement) + 1;
                    } else {
                        suffixValIncrement = Number(suffixValIncrement) + 2;
                    }
                } else if (Gender == "Girl" && temp == 0) {
                    if (suffixValIncrement % 2 == 0) {
                        suffixValIncrement = Number(suffixValIncrement) + 2;
                    } else {
                        suffixValIncrement = Number(suffixValIncrement) + 1;
                    }
                } else if (Gender == "Unisex" && temp == 0) {

                    suffixValIncrement = Number(suffixValIncrement) + 1;
                    //logger.info("-_-_-_-_-suffixValIncrement-_-_-_-_-_-_-_-_-"+suffixValIncrement);
                }

                var matchfound = 0;
                for (var counter = 0; counter < suffixList.size(); counter++) {
                    var suffValue = suffixList.get(counter);

                    if (suffValue == suffixValIncrement) {
                        matchfound = 1;
                    }
                    //logger.info("-matchfound-"+matchfound);
                }
                if ((matchfound == 0) && temp == 0) {
                    //logger.info(suffixValIncrement+"-_-_-_-_-suffixList before -_-_-_-_-_-_-_-_-"+suffixList+"-temp-"+temp);
                    temp = 1;
                    suffixVal = suffixValIncrement;
                }
            }
        } else {
            //logger.info("-In Else ValuesInLov-"+suffixValIncrement);
            suffixList = new java.util.ArrayList(suffixSet);
            var valIncrement = 0;

            if (suffixList.size() > 0 && suffixList.get(0) == "000") {
                valIncrement = 1;
                suffixValIncrement = "000";
            } else if (suffixList.size() > 0 && suffixList.get(0) == "001") {
                valIncrement = 1;
                suffixValIncrement = "001";
            }

            for (var i = 0; i <= suffixList.size(); i++ && temp == 0) {

                if (Gender == "Boy" && temp == 0) {

                    if (suffixValIncrement % 2 == 0) {

                        suffixValIncrement = Number(suffixValIncrement) + 1;
                    } else {
                        suffixValIncrement = Number(suffixValIncrement) + 2;
                    }

                } else if (Gender == "Girl" && temp == 0) {
                    if (valIncrement == "1") {
                        if (suffixValIncrement % 2 == 0) {
                            suffixValIncrement = Number(suffixValIncrement) + 2;
                        } else {
                            suffixValIncrement = Number(suffixValIncrement) + 1;
                        }
                    }
                } else if (Gender == "Unisex" && temp == 0 && valIncrement == "1") {
                    suffixValIncrement = Number(suffixValIncrement) + 1;
                    logger.info("-_-_-_-_-suffixValIncrement-_-_-_-_-_-_-_-_-" + suffixValIncrement);
                }


                var matchfound = 0;
                for (var counter = 0; counter < suffixList.size(); counter++) {
                    var suffValue = suffixList.get(counter);

                    if (suffValue == suffixValIncrement) {
                        matchfound = 1;
                    }
                    //logger.info("-matchfound-"+matchfound);
                }
                if ((matchfound == 0) && temp == 0) {
                    //logger.info(suffixValIncrement+"-_-_-_-_-suffixList before -_-_-_-_-_-_-_-_-"+suffixList+"-temp-"+temp);
                    temp = 1;
                    suffixVal = suffixValIncrement;
                }
            }

            if (temp == 0 && Gender == "Girl") {
                //logger.info("-In tempSuffix Last If Girl temp-" + temp);
                if (maxSuffix == "") {
                    suffixVal = "000";
                } else {
                    if (maxSuffix % 2 == 0) {
                        suffixVal = maxSuffix + 2;
                    } else {
                        suffixVal = maxSuffix + 1;
                    }
                }
            } else if (temp == 0 && Gender == "Boy") {
                logger.info("-In tempSuffix Last else Boy temp-" + temp);
                if (maxSuffix == "") {
                    suffixVal = "001";
                } else {
                    if (maxSuffix % 2 != 0) {
                        suffixVal = maxSuffix + 2;
                    } else {
                        suffixVal = maxSuffix + 1;
                    }
                }
            }
        }

    }
    suffixVal = getTheUnusedSuffix(WRINPrefixVal, suffixVal, mcdItem, Gender);
    return suffixVal;

}

function setWRINtoTempObjects() {
    var references = node.getReferencedByProducts().toArray();
    logger.info("-_-_-_-_-_-_-_-references-_-_-_-_-_-_-" + references.length);
    if (references.length > 0) {
        for (var i = 0; i < references.length; i++) {
            if ((references[i].getReferenceType() == "TempObjToItem")) {
                var tempObj = references[i].getSource().getID();
                var formattedTempObjectsRef = step.getProductHome().getProductByID(tempObj);
                logger.info("-_-_-_-_-_-_-_-_-_-_-_-_-_-_-" + formattedTempObjectsRef);
                formattedTempObjectsRef.getValue("WRINPrefix").setSimpleValue(node.getValue("WRINPrefix").getSimpleValue());
                formattedTempObjectsRef.getValue("WRINSuffix").setSimpleValue(node.getValue("WRINSuffix").getSimpleValue());
                formattedTempObjectsRef.getValue("WRINNUMBER").setSimpleValue(node.getValue("WRINNUMBER").getSimpleValue());
            }
        }
    }
}


function getMcDItemByPackaging() {
    var nodereferences = node.getReferences().asSet().iterator();
    while (nodereferences.hasNext()) {
        var reference1 = nodereferences.next();
        if (reference1.getReferenceType() == "PackToMcDonaldItem") {
            var mcdID = reference1.getTarget().getID();
            McDitem = step.getProductHome().getProductByID(mcdID);
        }
    }
    return McDitem;
}

// **************** Coding for WRIN Suffix Gaps Started ********************


function checkPrefSufFoundForNonPromotions(wrinPrefix, fetchPrefixSuffix) {
    logger.info("-_-_-_-checkPrefSufFoundForNonPromotions-_-_-" + fetchPrefixSuffix);
    var WRINVal = wrinPrefix.concat(fetchPrefixSuffix);
    logger.info("-WRINVal addin-" + WRINVal);
    var WRINNumResults = new java.util.ArrayList(1000);
    logger.info("-before addin-" + WRINNumResults.size());
    var calWRINAtrribute = step.getAttributeHome().getAttributeByID("WRINNUMBER");
    var searchQuery = new com.stibo.core.domain.singleattributequery.SingleAttributeQueryHome.SingleAttributeQuerySpecification(com.stibo.core.domain.Product, calWRINAtrribute, WRINVal);
    WRINNumResults = step.getHome(com.stibo.core.domain.singleattributequery.SingleAttributeQueryHome).querySingleAttribute(searchQuery).asList(1000);
    logger.info("-searchResults MAX-_-_-" + WRINNumResults.size());

    logger.info("-After addin-" + WRINNumResults.size());
    //Added for Prodcution Fix Ended.
    if (WRINNumResults != null && WRINNumResults.size() > 0) {
        logger.info("-In IF Loop>0-_-_-" + WRINNumResults.size());
        logger.info(fetchPrefixSuffix.concat(",") + "-bef MissingSuffixesForPrefix-" + MissingSuffixesForPrefix);
        MissingSuffixesForPrefix = MissingSuffixesForPrefix.replace(fetchPrefixSuffix.concat(","), "");
        logger.info("-af MissingSuffixesForPrefix-" + MissingSuffixesForPrefix);
        mcdProdReference.getValue("MissingSuffixesForPrefix").setSimpleValue(MissingSuffixesForPrefix);
        matchFound1 = 0;
    } else {
        matchFound1 = fetchPrefixSuffix;
        logger.info(fetchPrefixSuffix.concat(",") + "-bef MissingSuffixesForPrefix-" + MissingSuffixesForPrefix);
        MissingSuffixesForPrefix = MissingSuffixesForPrefix.replace(fetchPrefixSuffix.concat(","), "");
        logger.info("-af MissingSuffixesForPrefix-" + MissingSuffixesForPrefix);
        mcdProdReference.getValue("MissingSuffixesForPrefix").setSimpleValue(MissingSuffixesForPrefix);
    }


    logger.info("-In return matchFound1-_-" + matchFound1);
    return matchFound1;
}

function checkPrefSufFoundForPromotions(wrinPrefix, fetchPrefixSuffix) {
    var counter = 0
    logger.info("-_-_-_-checkPrefSufFoundForPromotions-_-_-" + fetchPrefixSuffix);
    var WRINVal = wrinPrefix.concat(fetchPrefixSuffix);
    logger.info("-WRINVal addin-" + WRINVal);
    var WRINNumResults = new java.util.ArrayList(1000);
    logger.info("-before addin-" + WRINNumResults.size());
    var calWRINAtrribute = step.getAttributeHome().getAttributeByID("WRINNUMBER");
    var searchQuery = new com.stibo.core.domain.singleattributequery.SingleAttributeQueryHome.SingleAttributeQuerySpecification(com.stibo.core.domain.Product, calWRINAtrribute, WRINVal);
    WRINNumResults = step.getHome(com.stibo.core.domain.singleattributequery.SingleAttributeQueryHome).querySingleAttribute(searchQuery).asList(1000);
    logger.info("-searchResults MAX-_-_-" + WRINNumResults.size());

    logger.info("-After addin-" + WRINNumResults.size());
    //Added for Prodcution Fix Ended.
    if (WRINNumResults != null && WRINNumResults.size() > 0) {
        logger.info("-In IF Loop>0-_-_-" + WRINNumResults.size());
        counter++;
        logger.info(fetchPrefixSuffix.concat(",") + "-Before MissingSuffixesForPrefix-" + MissingSuffixesForPrefix);
        MissingSuffixesForPrefix = MissingSuffixesForPrefix.replace(fetchPrefixSuffix.concat(","), "");
        logger.info("-After MissingSuffixesForPrefix-" + MissingSuffixesForPrefix);
        mcdProdReference.getValue("MissingSuffixesForPrefix").setSimpleValue(MissingSuffixesForPrefix);
    }
    logger.info(counter + "-_-_-Gender-_-_-" + Gender);
    if (counter == 0) {
        if (Gender == "Boy") {
            if (fetchPrefixSuffix % 2 != 0) {
                return fetchPrefixSuffix;
            } else {
                matchFound1Suffix = 0;
                return matchFound1Suffix;
            }
        } else if (Gender == "Girl") {
            if (fetchPrefixSuffix % 2 == 0) {
                return fetchPrefixSuffix;
            } else {
                matchFound1Suffix = 0;
                return matchFound1Suffix;
            }
        } else {
            return fetchPrefixSuffix;
        }
        logger.info("-_-_-fetchPrefixSuffix-_-_-" + fetchPrefixSuffix);
    } else {
        matchFound1Suffix = 0;
        logger.info("-_-_-matchFound1Suffix-_-_-" + matchFound1Suffix);
        return matchFound1Suffix;
    }
}
logger.info("-Last-" + node.getValue("WRINNUMBER").getSimpleValue());
// **************** Coding for WRIN Suffix Gaps Ended ********************


function getMcDItem(tempObj) {
    var facilityrefID = null;
    var nodereferences = tempObj.getReferences().asSet().iterator();
    while (nodereferences.hasNext()) {
        var reference1 = nodereferences.next();
        if ((reference1.getReferenceType() == "TempObjToItem") || (reference1.getReferenceType() == "PackToMcDonaldItem")) {
            var facilityref = reference1.getTarget().getID();
            facilityrefID = step.getProductHome().getProductByID(facilityref);
        }
    }
    return facilityrefID
}

// Below code is added to ensure that Found Suffix + Given Prefix 
// is not already  associated with a WRIN
function getTheUnusedSuffix(WRINPrefixVal, WRINSuffixVal, mcdItem, gender) {
    var increment;

    if (gender == null || gender == "Unisex") {
        increment = 1;
    } else if (gender == "Boy" || gender == "Girl") {
        increment = 2;
    }
    var counter = WRINSuffixVal;
    logger.info("Inside getTheUnusedSuffix ");
    for (; counter <= 999; counter += increment) {

        if (step.getEntityHome().getObjectByKey("GTINWRIN", appendZeros(WRINPrefixVal + "", 5) + appendZeros(counter + "", 3)) == null) {
            logger.info("Return Value from here ..... is " + counter);
            return counter;
        }

    }

    return counter; //MDSIM-5449: Defect MDSIM-5587

}
  </javaScript>
</config>
Action #3 (JavaScriptBusinessActionWithBinds):
<config>
  <bindings>
    <binding alias="node" type="Node" contract="CurrentObjectBindContract"/>
    <binding alias="step" type="Manager" contract="ManagerBindContract"/>
    <binding alias="logger" type="Logger" contract="LoggerBindContract"/>
    <binding alias="mailer" type="MailHome" contract="MailHomeBindContract"/>
  </bindings>
  <messages/>
  <javaScript>
//********************** 3 ***************************

var parsedDate=getCurrentDate.getCurrentDateInHHMMSS();
var ItemToMarketCategoryRef = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketCategory")).toArray();
var parsedDate=getCurrentDate.getCurrentDateInHHMMSS();
for(var i=0;i<ItemToMarketCategoryRef.length;i++)
{
   var CurrentRef = ItemToMarketCategoryRef[i];
   CurrentRef.getValue("DataTeamOnExitCreatedOn").setSimpleValue(parsedDate);						  
}

var nodereferences = node.getReferences().asSet().iterator();
while (nodereferences.hasNext())
{
   var reference1 = nodereferences.next();
   if (reference1.getReferenceType() == "PackToMcDonaldItem")
   {
		var mcdID = reference1.getTarget().getID();
       McDitem = step.getProductHome().getProductByID(mcdID);            
       McDitem.getValue("AttributesforWRIN").setSimpleValue(node.getValue("AttributesforWRIN").getSimpleValue())
    
   }
}

marRejected.rejectTargetMarketPopulation(node,step,logger);
var formattedEmail = node.getValue("ContactEmail").getSimpleValue();
var flag=0;
   var ReferenceType = step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketCategory");
    if (ReferenceType != null) {
        var ReferenceTypes = node.getReferences(ReferenceType);
        if (ReferenceTypes.size() > 0) {
            for (var i = 0; i < ReferenceTypes.size(); i++) {
                var reference = ReferenceTypes.get(i);
                var marketid = reference.getTarget().getID();
                var marketName = reference.getTarget().getName();
				 var status = reference.getValue("SupplierItemMktApprovalStatus").getSimpleValue();
				   if ((status == "Rejected")&&(flag==0)){
				   	  flag=1;
					   email.generateEmailForRejection(node, step, mailer, logger, formattedEmail, "Data Team", marketName);
				   }
			}
		}
	}
  </javaScript>
</config>
Action #4 (JavaScriptBusinessActionWithBinds):
<config>
  <bindings>
    <binding alias="node" type="Node" contract="CurrentObjectBindContract"/>
    <binding alias="step" type="Manager" contract="ManagerBindContract"/>
    <binding alias="logger" type="Logger" contract="LoggerBindContract"/>
  </bindings>
  <messages/>
  <javaScript>
//********************** 4 ***************************

var GTIN = node.getValue("GTIN").getSimpleValue();
var IsNewItem = node.getValue("IsNewItem").getSimpleValue();
var GTINPREFIX = node.getValue("GTINPREFIX").getSimpleValue();

var Objtype = node.getObjectType().getID();

var currentDate = new Date().toISOString().slice(0, 10);
currentDate = currentDate + " 00:00:00";
var CurrentUser = step.getCurrentUser().getID();
var objectType1 = node.getObjectType().getID();
logger.info("-_-_-1-_-" + objectType1);
var caseRef, ProgramName1;
var packReferences;
var references = node.getProductReferences().asSet().iterator();
var counter = 0;
var GTINGeneratorRefObj = step.getProductHome().getProductByID("0195500");
var children = GTINGeneratorRefObj.getChildren();

while (references.hasNext()) {
    var reference = references.next();
    if (reference.getReferenceType() == "PackCaseToAI") {
        ProgramName1 = reference.getTarget().getParent().getID();
    }
}

if ((GTIN == null) && ((IsNewItem != null) && (IsNewItem == "Yes"))) {

    var mcdItemRef = getMcDItem(node);
    if (mcdItemRef != null) {
        //Added IF Block as a part of 3173
        if (children.size() > 0) {
            logger.info("-_-_-inside if 444-_-_-" + children.size());
            var fetchOldGTIN = getOldGTINProduct(node, step, logger);
             logger.info("-_-_-fetchOldGTIN if 555-_-_-" + fetchOldGTIN);
            getPackCase(node, fetchOldGTIN.getID());
             logger.info("-_-_-fetchOldGTIN if 4443-_-_-" + fetchOldGTIN);
            mcdItemRef.getValue("GTIN").setSimpleValue(fetchOldGTIN.getID());
            logger.info("-_-_-ffffff-_-_-" );
        } else {
            logger.info("-_-_-inside else -_-_-" + children.size());
            node.getValue("GTINCopies").setSimpleValue("1");
            node.getValue("ProductObjectType").setSimpleValue("Case");
            var fetchGTIN = GTINGEN.generateGTIN(node, step, logger, false);
            logger.info("-_-_-fetchGTIN-_-_-" + fetchGTIN);
            getPackCase(node, fetchGTIN);
            mcdItemRef.getValue("GTIN").setSimpleValue(fetchGTIN);
        }

        //Added IF Block as a part of 3173 Started

        //MDSIM-5271 - start
		var GTIN = null;
		if (objectType1 == "Pack") {
			logger.info("-_-If Pack Object-_-_-_-_-");
			var packReferencesList = node.getReferencedByProducts().toArray();
			for (var ref = 0; ref < packReferencesList.length; ref++) {
				if ((packReferencesList[ref].getReferenceType() == "PackagingCaseToPack")) {
					var caseRefObj = packReferencesList[ref].getSource();
					GTIN = caseRefObj.getValue("GTIN").getSimpleValue();
				}
			}
		}else{
			GTIN = node.getValue("GTIN").getSimpleValue();
		}
		//MDSIM-5271 - end
		
        //var GTIN = node.getValue("GTIN").getSimpleValue();
        var product = step.getProductHome().getProductByID(GTIN);
        if (product != null) {
            product.getValue("IsGTINUsed").setSimpleValue("Yes");
            product.setParent(step.getProductHome().getProductByID("GTINUsed"));
        }
        var PreviousGTIN = node.getValue("PreviousGTIN").getSimpleValue();
        if (GTIN == PreviousGTIN) {
            node.getValue("PreviousMCDGTIN").setSimpleValue(PreviousGTIN);
        }
        //Added IF Block as a part of 3173 Ended       
    }
} else if ((GTIN != null) && ((IsNewItem != null) && (IsNewItem == "Yes"))) {

    logger.info("-_-ProgramName1-_-" + ProgramName1);
    if (objectType1 == "Pack") {
        logger.info("-_-1-_-");
        packReferences = node.getReferencedByProducts().toArray();
        for (var counter = 0; counter < packReferences.length; counter++) {
            if ((packReferences[counter].getReferenceType() == "PackagingCaseToPack")) {
                caseRef = packReferences[counter].getSource();
            }
        }
    } else if (objectType1 == "Case") {
        logger.info("-_-2-_-");
        caseRef = node;
    }

    var gtinVal = caseRef.getValue("GTIN").getSimpleValue(); //50195500000010
    logger.info("-_-gtinVal-_-" + gtinVal);
    if (gtinVal != null) {
        var GTINPrefixGeneratorRefObj = step.getProductHome().getProductByID(gtinVal);
        logger.info("-_-GTINPrefixGeneratorRefObj-_-" + GTINPrefixGeneratorRefObj);
        if (GTINPrefixGeneratorRefObj != null) {
            var ProgramName = GTINPrefixGeneratorRefObj.getValue("ProgramName").getSimpleValue();
            logger.info(ProgramName + "-_-Inside not equal-_-_-" + ProgramName1);
            if (ProgramName != ProgramName1) {
                logger.info("-_-Inside not equal-_-_-");
				 //Added  as a part of 3173 Started
				GTINPrefixGeneratorRefObj.getValue("ProgramName").setSimpleValue(ProgramName1);
				//Added  as a part of 3173 Ended
               // throw "\n\nProvided Case GTIN is not Matching with Assembly Item.\n";
            }
        }
    }
    logger.info("-caseRef-_-" + caseRef);
}


function getPackCase(tempObj, fetchGTIN) {
    var packCase = tempObj;
    logger.info(objectType1 + "-_-GTIN1-_-_-_-_-" + node.getValue("GTIN").getSimpleValue());
    if (objectType1 == "Pack") {
        logger.info("-_-2-_-_-_-_-");
        packReferences = packCase.getReferencedByProducts().toArray();
        for (var counter = 0; counter < packReferences.length; counter++) {
            if ((packReferences[counter].getReferenceType() == "PackagingCaseToPack")) {
                caseRef = packReferences[counter].getSource();
                var caseReferences = caseRef.getReferencedByProducts().toArray();
                if (caseReferences.length > 0) {
                    for (var j = 0; j < caseReferences.length; j++) {
                        if ((caseReferences[j].getReferenceType() == "PackagingPalletToCase")) {
                            palletRef = caseReferences[j].getSource();
                        }
                    }
                }
            }
        }
        logger.info("-_-GTIN2-_-_-_-_-" + node.getValue("GTIN").getSimpleValue());
        if (fetchGTIN != null) {
            if (caseRef != null) {
            	 caseRef.getValue("GTIN").setSimpleValue(fetchGTIN);
                caseRef.getValue("LastChangeDate").setSimpleValue(currentDate);
                caseRef.getValue("LastUpdatedBy").setSimpleValue(CurrentUser);
            }
            packCase.getValue("IsNewItem").setSimpleValue("Yes");


            packCase.getValue("LastChangeDate").setSimpleValue(currentDate);
            packCase.getValue("LastUpdatedBy").setSimpleValue(CurrentUser);

        }
        logger.info("-_-GTIN33-_-_-_-_-" + node.getValue("GTIN").getSimpleValue());
    } else if (objectType1 == "Case") {
        logger.info("-_-3-_-_-_-_-");
        caseReferences = packCase.getReferencedByProducts().toArray();
        if (caseReferences.length > 0 && objectType1 == "Case") {
            for (var j = 0; j < caseReferences.length; j++) {
                if ((caseReferences[j].getReferenceType() == "PackagingPalletToCase")) {
                    palletRef = caseReferences[j].getSource();
                    //logger.info("-_-_-palletRef-_-" + palletRef);
                }
            }
        }
        if (fetchGTIN != null) {
            packCase.getValue("GTIN").setSimpleValue(fetchGTIN);
            packCase.getValue("IsNewItem").setSimpleValue("Yes");
            packCase.getValue("LastChangeDate").setSimpleValue(currentDate);
            packCase.getValue("LastUpdatedBy").setSimpleValue(CurrentUser);
        }
        logger.info("-_-GTIN3-_-_-_-_-" + node.getValue("GTIN").getSimpleValue());
    }
}

function getMcDItem(node) {
    var mcdrefID = null;
    var nodereferences = node.getReferences().asSet().iterator();
    while (nodereferences.hasNext()) {
        var reference1 = nodereferences.next();
        if (reference1.getReferenceType() == "PackToMcDonaldItem") {
            var mcdref = reference1.getTarget().getID();
            mcdrefID = step.getProductHome().getProductByID(mcdref);
        }
    }
    return mcdrefID
}


//The below added by Shiva to poulate GTINUsed from GTIN for Case - As Suggested by Suresh.
if (Objtype == "Pack") {
    node.getValue("GTINUsed").setSimpleValue(node.getValue("GTIN").getSimpleValue());
    var referencedby = node.getReferencedByProducts().toArray();
    for (var i = 0; i < referencedby.length; i++) {
        if ((referencedby[i].getReferenceType() == "PackagingCaseToPack")) {
            var Case = referencedby[i].getSource();
            Case.getValue("GTINUsed").setSimpleValue(Case.getValue("GTIN").getSimpleValue());
        }
    }
} else if (Objtype == "Case") {
    node.getValue("GTINUsed").setSimpleValue(node.getValue("GTIN").getSimpleValue());
}




function getOldGTINProduct(node, step, logger) {
    logger.info("-_-getOldGTINProduct-_-");
    var product = step.getProductHome().getProductByID("0195500");
    var children = product.getChildren();
    var oldProduct = children.get(0);
    var child;

    for (var j = 0; j < children.size(); j++) {
        child = oldProduct;

        var dateSplit1 = child.getValue("CreatedOn").getSimpleValue();
        var date1 = dateSplit1.split(' ')[0];
        date1 = date1.split("-");
        var newDate1 = new Date();
        newDate1.setDate(date1[2]);
        newDate1.setMonth(date1[1] - 1);
        newDate1.setYear(date1[0]);

        var date1TimeStamp = dateSplit1.split(' ')[1];
        var timeStamp = date1TimeStamp.split(":");
        newDate1.setMinutes(timeStamp[1]);
        newDate1.setHours(timeStamp[0]);
        newDate1.setSeconds(timeStamp[2]);


        var chilld = children.get(j);
        var dateSplit2 = chilld.getValue("CreatedOn").getSimpleValue();
        var date2 = dateSplit2.split(' ')[0];
        date2 = date2.split("-");
        var newDate2 = new Date();
        newDate2.setDate(date2[2]);
        newDate2.setMonth(date2[1] - 1);
        newDate2.setYear(date2[0]);

        var date2TimeStamp = dateSplit2.split(' ')[1];
        var timeStamp1 = date2TimeStamp.split(":");
        newDate2.setMinutes(timeStamp1[1]);
        newDate2.setHours(timeStamp1[0]);
        newDate2.setSeconds(timeStamp1[2]);

        logger.info(dateSplit1 + "-_-_-_-_-_-_-" + dateSplit2);
        logger.info(newDate1 + "-_-_-" + child + "====" + newDate2 + "-_-_-" + chilld);
        if (newDate1 < newDate2) {
            oldProduct = child;
        } else {
            oldProduct = chilld;
        }
        logger.info("oldProduct " + oldProduct);
    }
    logger.info(oldProduct);
    return oldProduct;
}

//setNewParent();
function setNewParent(){
	var product = step.getProductHome().getProductByID("0195500");
	var children = product.getChildren();
	for(var i = 0; i < children.size(); i++){
		var child = children.get(i);
		if(child.getValue("IsGTINUsed").getSimpleValue() == "Yes"){
			child.setParent(step.getProductHome().getProductByID("GTINUsed"));
		}
	}
}
  </javaScript>
</config>
Action #5 (JavaScriptBusinessActionWithBinds):
<config>
  <bindings>
    <binding alias="node" type="Node" contract="CurrentObjectBindContract"/>
    <binding alias="step" type="Manager" contract="ManagerBindContract"/>
    <binding alias="logger" type="Logger" contract="LoggerBindContract"/>
  </bindings>
  <messages/>
  <javaScript>
//********************** 5 ***************************

/*************************************************************
Rule Name: TMS Workflow Reduction - Approval upon Data Team Step Completion.
Developed: Suresh Maddula/ Shiva Dayal
US:2483
Summary: This business rule will TMS Workflow Reduction - Approval upon Data Team Step Completion.
/*************************************************************/

var IsAutoApproved = node.getValue("InboundFlag").getSimpleValue();
//var IsNewProduct = node.getValue("IsNewProduct").getSimpleValue(); // commented by Sourav Tamli for MDSIM - 4898
var Managed_By = node.getValue("ItemManagedBy").getSimpleValue();
var Responsible_Entity = node.getValue("ItemResponsibleEntity").getSimpleValue();
var ProductGroup = node.getValue("ProductGroup").getSimpleValue();
var ProductCategory = node.getValue("ProductCategory").getSimpleValue();
var currentDate = new Date().toISOString().slice(0, 10);
currentDate = currentDate + " 00:00:00";

var currentuserVal = step.getUserHome().getUserById("STEPSYS");
var currentuserEmail = "STEPSYS" + "(" + currentuserVal.getEMail() + ")";

logger.info("-_-ProductCategory-_-_-" + ProductCategory + "-_-" + Managed_By + "-_-" + ProductGroup);
var mcd = getMcDItem(node);

	
 if ((Managed_By == "TMS" || Managed_By == "McDonald's") && (ProductGroup == "Promotions") && (ProductCategory == "Non-Food Promotions (include toys)"))
{
    logger.info("-_-inside if -_-_-");

    node.getValue("InboundFlag").setSimpleValue("Yes");
    node.getValue("LastChangeDate").setSimpleValue(currentDate);
    
	
	var currentuser = step.getCurrentUser().getID();
	var currentuserVal = step.getUserHome().getUserById(currentuser);
	if (currentuserVal != null)
		node.getValue("LastUpdatedBy").setSimpleValue(currentuser);
	else
		 node.getValue("LastUpdatedBy").setSimpleValue("STEPSYS");	

}else if(IsAutoApproved=="Yes"){
	 node.getValue("LastChangeDate").setSimpleValue(currentDate);
     node.getValue("LastUpdatedBy").setSimpleValue("STEPSYS");
	 //node.getValue("ApprovedByMktCatManager").setSimpleValue(currentuserEmail);
	 var ItemToMarketCategoryRef = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToMarketCategory")).toArray();
    for (var i = 0; i < ItemToMarketCategoryRef.length; i++)
    {
        var CurrentRef = ItemToMarketCategoryRef[i];
        CurrentRef.getValue("MarketQATempObjOnEntryCreatedOn").setSimpleValue(currentDate);
        CurrentRef.getValue("MarketQATempObjOnExitCreatedOn").setSimpleValue(currentDate);
    }
}


function getMcDItem(tempObj)
{
        var facilityrefID = null;
        var nodereferences = tempObj.getReferences().asSet().iterator();
        while (nodereferences.hasNext())
        {
                var reference1 = nodereferences.next();
                if ((reference1.getReferenceType() == "TempObjToItem") || (reference1.getReferenceType() == "PackToMcDonaldItem"))
                {

                        var facilityref = reference1.getTarget().getID();
                        facilityrefID = step.getProductHome().getProductByID(facilityref);
                }
        }
        return facilityrefID
}
  </javaScript>
</config>
Action #6 (JavaScriptBusinessActionWithBinds):
<config>
  <bindings>
    <binding alias="node" type="Node" contract="CurrentObjectBindContract"/>
    <binding alias="step" type="Manager" contract="ManagerBindContract"/>
    <binding alias="workflow" type="Workflow" contract="CurrentWorkflowBindContract"/>
    <binding alias="lookup" type="LookupTableHome" contract="LookupTableHomeBindContract"/>
    <binding alias="logger" type="Logger" contract="LoggerBindContract"/>
  </bindings>
  <messages/>
  <javaScript>
//********************7**************************************
// Added by Sourav Tamli for MDSIM - 6593 :: Started //
ClearReferences()
populateItemRelevantMarketCategory.CheckMarketCategoryStatusInFacility(node, step, logger);
populateItemRelevantMarketCategory.PopulateReleventMarketCategoryDetailsOfItem(node, step, logger, lookup) ;
CopyReferences();
// Added by Sourav Tamli for MDSIM - 6593 :: Ended //

//MDSIM-4303 or MDSIM-3779

validateMfgByPrdCtgy.updateRequestorReviewComments(node, step, true);


function ClearReferences() {

    var ItemToFacilityExt = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToFacilityExtension")).toArray();
    var ItemToFacility = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToFacility")).toArray();
    for (var i = 0; i < ItemToFacilityExt.length; i++) {

        ItemToFacilityExt[i].getValue("ItemRelevantMarketCategory").setSimpleValue("");

    }
    for (var j = 0; j < ItemToFacility.length; j++) {

        ItemToFacility[j].getValue("ItemRelevantMarketCategory").setSimpleValue("");

    }

}

function CopyReferences(){

	var ItemToFacilityExt = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToFacilityExtension")).toArray();
	var ItemToFacility = node.getReferences(step.getReferenceTypeHome().getReferenceTypeByID("ItemToFacility")).toArray();
	for(var i = 0 ; i < ItemToFacilityExt.length ; i++){
	
		for(var j = 0 ; j < ItemToFacility.length ; j++){
		
			if(ItemToFacilityExt[i].getTarget().getID() == ItemToFacility[j].getTarget().getID()){
			
				ItemToFacility[j].getValue("ItemRelevantMarketCategory").setSimpleValue(ItemToFacilityExt[i].getValue("ItemRelevantMarketCategory").getSimpleValue());
			
			}
		
		}
	
	}

}
  </javaScript>
</config> -->
            <SetupGroupLink SetupGroupID="Workflows"></SetupGroupLink>
            <Name>acn-f5569719-cb3d-48eb-992e-3f9fe0b5be1a</Name>
            <OnApprove ApproveSetup="Never"></OnApprove>
            <Configuration></Configuration>
            <ValidObjectTypes AllObjectTypesValid="true">
                <ValidObjectType ID="Case"></ValidObjectType>
                <ValidObjectType ID="McDTargetMarketTempObject"></ValidObjectType>
                <ValidObjectType ID="McDonaldItem"></ValidObjectType>
                <ValidObjectType ID="Pack"></ValidObjectType>
            </ValidObjectTypes>
        </BusinessRule>
    </BusinessRules>
</STEP-ProductInformation>